// Generated by CoffeeScript 1.12.4
(function() {
  var WanderingCountry, WanderingCountryBase, WanderingCountryWithCCNQ, WanderingCountryWithUserDatabase, app, assert, couchapp, create, debug, load, p_fun, seem, sleep, update,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  debug = (require('debug'))('wandering-country');

  seem = require('seem');

  sleep = require('./sleep');

  assert = function(test, msg) {
    if (!test) {
      throw new Error(msg);
    }
  };

  load = seem(function*(db, id) {
    var doc;
    debug('load', {
      id: id
    });
    return doc = (yield db.get(id)["catch"](function() {
      return {
        _id: id
      };
    }));
  });

  create = seem(function*(db, doc) {
    var rev;
    debug('create', doc);
    rev = (yield db.put(doc)["catch"](function(error) {
      debug("create: " + error + " " + error.stack);
      return Promise.reject(error);
    })).rev;
    debug('create OK', {
      rev: rev
    });
    doc._rev = rev;
    return doc;
  });

  update = seem(function*(db, data, retry) {
    var doc, k, rev, v;
    if (retry == null) {
      retry = 1;
    }
    debug('update', data);
    doc = (yield db.get(data._id)["catch"](function() {
      return data;
    }));
    debug('update: get', doc);
    for (k in data) {
      v = data[k];
      if (k[0] !== '_') {
        doc[k] = v;
      }
    }
    if (data._deleted) {
      doc._deleted = data._deleted;
    }
    debug('update: put', doc);
    rev = (yield db.put(doc)["catch"](seem(function*(error) {
      debug(error + " " + error.stack);
      if (retry > 0) {
        yield sleep(500);
        return (yield update(db, data, retry - 1));
      } else {
        return Promise.reject(error);
      }
    }))).rev;
    doc._rev = rev;
    return doc;
  });

  WanderingCountryBase = (function() {
    function WanderingCountryBase(db1) {
      this.db = db1;
    }

    WanderingCountryBase.prototype.load = function(id) {
      return load(this.db, id);
    };

    WanderingCountryBase.prototype.update = function(data) {
      return update(this.db, data);
    };

    WanderingCountryBase.prototype.create = function(data) {
      return create(this.db, data);
    };

    return WanderingCountryBase;

  })();

  WanderingCountryWithCCNQ = (function(superClass) {
    var generic_load, prefix_handlers, register;

    extend(WanderingCountryWithCCNQ, superClass);

    function WanderingCountryWithCCNQ() {
      this.create_device = bind(this.create_device, this);
      this.create_domain = bind(this.create_domain, this);
      return WanderingCountryWithCCNQ.__super__.constructor.apply(this, arguments);
    }

    WanderingCountryWithCCNQ.prototype.normalize_account = 'function(account) { return account }';

    generic_load = function(name) {
      return seem(function*(key) {
        var docs, rows;
        debug("generic_load " + name, key);
        rows = (yield this.db.query(app + "/" + name, {
          reduce: false,
          include_docs: true,
          key: key
        })["catch"](function(error) {
          debug("generic_load " + name + " Failed: " + error + " " + error.stack);
          return Promise.reject(error);
        })).rows;
        debug("generic_load " + name + " OK", key, rows);
        return docs = rows.map(function(row) {
          return row.doc;
        });
      });
    };

    WanderingCountryWithCCNQ.prototype.devices_for = generic_load('devices');

    WanderingCountryWithCCNQ.prototype.endpoints_for = generic_load('endpoints');

    WanderingCountryWithCCNQ.prototype.global_numbers_for = generic_load('global_numbers');

    WanderingCountryWithCCNQ.prototype.local_numbers_for = generic_load('local_numbers');

    WanderingCountryWithCCNQ.prototype.number_domains_for = generic_load('number_domains');

    WanderingCountryWithCCNQ.prototype.load_devices_for_account = function(account) {
      return this.devices_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_endpoints_for_account = function(account) {
      return this.endpoints_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_endpoints_for_domain = function(domain) {
      return this.endpoints_for(['domain', domain]);
    };

    WanderingCountryWithCCNQ.prototype.load_global_numbers_for_account = function(account) {
      return this.global_numbers_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_global_numbers_for_local_number = function(local_number) {
      return this.global_numbers_for(['local_number', local_number]);
    };

    WanderingCountryWithCCNQ.prototype.load_local_numbers_for_account = function(account) {
      return this.local_numbers_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_local_numbers_for_number_domain = function(number_domain) {
      return this.local_numbers_for(['number_domain', number_domain]);
    };

    WanderingCountryWithCCNQ.prototype.load_number_domains_for_account = function(account) {
      return this.number_domains_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.create_domain = function(doc) {
      doc.type = 'domain';
      return this.create(doc);
    };

    WanderingCountryWithCCNQ.prototype.create_device = function(doc) {
      doc.type = 'device';
      return this.create(doc);
    };

    WanderingCountryWithCCNQ.prototype.load_list_entries = seem(function*(number) {
      var docs, rows;
      debug('load_list_entries', number);
      rows = (yield this.db.allDocs({
        startkey: "list:" + number + "@",
        endkey: "list:" + number + "@\uffff",
        include_docs: true
      })["catch"](function(error) {
        debug("load_list_entries: " + error + " " + error.stack);
        return Promise.reject(error);
      })).rows;
      return docs = rows.map(function(row) {
        return row.doc;
      });
    });

    WanderingCountryWithCCNQ.prototype.add_list_entry = seem(function*(doc) {
      var rev;
      debug('add_list_entry', doc);
      if (!(doc.blacklist === true || doc.whitelist === true)) {
        return null;
      }
      doc._id = "list:" + doc.number + "@" + doc.calling_number;
      doc.type = 'list';
      debug('add_list_entry', doc);
      rev = (yield this.db.put(doc)["catch"](function(error) {
        debug("add_list_entry " + error + " " + error.stack);
        return Promise.reject(error);
      })).rev;
      return rev;
    });

    WanderingCountryWithCCNQ.prototype.load_domain = seem(function*(name) {
      var domain, endpoints, number_domain, numbers, result, rows;
      debug('load_domain', name);
      number_domain = (yield this.db.get("number_domain:" + name)["catch"](function() {
        return null;
      }));
      if (number_domain == null) {
        debug('no number_domain', name);
        return;
      }
      if (number_domain.dialplan !== 'centrex') {
        debug('number_domain is not centrex', name, number_domain);
        return;
      }
      domain = (yield this.db.get("domain:" + name)["catch"](function() {
        return null;
      }));
      if (domain == null) {
        debug('no domain', name);
        return;
      }
      rows = (yield this.db.query(app + "/numbers_by_domain", {
        reduce: false,
        include_docs: true,
        key: name
      })["catch"](function() {
        return {
          rows: null
        };
      })).rows;
      if (rows == null) {
        debug('no numbers_by_domain', name);
        return;
      }
      numbers = rows.map(function(row) {
        return row.doc;
      });
      rows = (yield this.db.query(app + "/endpoints_by_domain", {
        reduce: false,
        include_docs: true,
        key: name
      })["catch"](function() {
        return {
          rows: null
        };
      })).rows;
      if (rows == null) {
        debug('no endpoints_by_domain', name);
        return;
      }
      endpoints = rows.map(function(row) {
        return row.doc;
      });
      result = {
        domain: domain,
        number_domain: number_domain,
        numbers: numbers,
        endpoints: endpoints
      };
      debug('load_domain', result);
      return result;
    });

    WanderingCountryWithCCNQ.prototype.load_number_domains = seem(function*() {
      var rows;
      debug('load_number_domains');
      rows = (yield this.db.allDocs({
        startkey: 'number_domain:',
        endkey: 'number_domain:\uffff'
      })["catch"](function(error) {
        var ref;
        debug("load_number_domains: " + ((ref = error.stack) != null ? ref : error));
        return Promise.reject(error);
      })).rows;
      debug('load_number_domains', rows);
      return rows.map(function(row) {
        var m;
        m = row.id.match(/^number_domain:(.+)$/);
        return {
          name: m[1],
          label: m[1]
        };
      });
    });

    WanderingCountryWithCCNQ.prototype.push_couchapp = function() {
      var doc;
      doc = couchapp({
        normalize_account: this.normalize_account
      });
      debug('couchapp', doc);
      return this.update(doc)["catch"](function() {
        return false;
      });
    };

    prefix_handlers = function(prefix) {
      var obj;
      return (
        obj = {},
        obj["load_" + prefix] = function(id) {
          return this.load(prefix + ":" + id, "load_" + prefix);
        },
        obj["update_" + prefix] = function(data) {
          return this.update(data, "update_" + prefix);
        },
        obj["remove_" + prefix] = function(data) {
          data._deleted = true;
          return this.update(data, "remove_" + prefix);
        },
        obj
      );
    };

    register = function(handlers) {
      var handler, name, results;
      results = [];
      for (name in handlers) {
        if (!hasProp.call(handlers, name)) continue;
        handler = handlers[name];
        results.push(WanderingCountryWithCCNQ.prototype[name] = handler);
      }
      return results;
    };

    register(prefix_handlers('list'));

    register(prefix_handlers('number'));

    register(prefix_handlers('endpoint'));

    register(prefix_handlers('number_domain'));

    register(prefix_handlers('device'));

    WanderingCountryWithCCNQ.prototype.update_prov_audio_blob = seem(function*(id, file, base, opts) {
      var a, doc, orig, ref, rev;
      debug('update_prov_audio_blob', id, base, opts);
      orig = base;
      switch (file.type) {
        case 'audio/mpeg':
          base += '.mp3';
          break;
        case 'audio/mp3':
          base += '.mp3';
          break;
        case 'audio/wav':
          base += '.wav';
          break;
        case 'audio/x-wav':
          base += '.wav';
          break;
        default:
          return Promise.reject(new Error("update_prov_audio_blob invalid_type " + file.type));
      }
      doc = (yield this.db.get(id));
      a = (ref = (yield this.db.putAttachment(doc._id, base, doc._rev, file, file.type)["catch"](function(error) {
        debug("update_prov_audio_blob " + error + " " + error.stack);
        return Promise.reject(error);
      })), rev = ref.rev, ref);
      return orig;
    });

    WanderingCountryWithCCNQ.prototype.create_dns_for_domain = seem(function*(domain) {
      var cfg, doc;
      debug('create_dns_for_domain', domain);
      cfg = (yield this.dns_for_domain(domain));
      debug('create_dns_for_domain, cfg', cfg);
      if (!((cfg.soa != null) && (cfg.admin != null) && (cfg.records != null))) {
        return Promise.reject(new Error('invalid configuration'));
      }
      doc = {
        _id: "domain:" + domain,
        domain: domain,
        type: 'domain',
        soa: cfg.soa,
        admin: cfg.admin,
        records: cfg.records
      };
      return (yield this.update(doc));
    });

    return WanderingCountryWithCCNQ;

  })(WanderingCountryBase);

  WanderingCountryWithUserDatabase = (function(superClass) {
    var load_messages, register;

    extend(WanderingCountryWithUserDatabase, superClass);

    function WanderingCountryWithUserDatabase(db, user_db1) {
      this.user_db = user_db1;
      WanderingCountryWithUserDatabase.__super__.constructor.call(this, db);
    }

    WanderingCountryWithUserDatabase.prototype.load_voicemail_settings = seem(function*(name) {
      var doc, udb;
      debug('load_voicemail_settings', {
        name: name
      });
      udb = this.user_db(name);
      doc = (yield load(udb, 'voicemail_settings'));
      udb.close();
      return doc;
    });

    WanderingCountryWithUserDatabase.prototype.update_voicemail_settings = seem(function*(name, data) {
      var doc, udb;
      debug('update_voicemail_settings', {
        name: name,
        data: data
      });
      udb = this.user_db(name);
      doc = (yield update(udb, data));
      udb.close();
      return doc;
    });

    load_messages = function(cat) {
      var obj;
      return (
        obj = {},
        obj["load_" + cat + "_messages"] = seem(function*(name) {
          var result, rows, udb;
          udb = this.user_db(name);
          rows = (yield udb.query("voicemail/" + cat + "_messages", {
            include_docs: true
          })["catch"](function() {
            return {
              rows: null
            };
          })).rows;
          result = rows != null ? rows.map(function(row) {
            return row.doc;
          }) : void 0;
          udb.close();
          return result;
        }),
        obj
      );
    };

    register = function(handlers) {
      var handler, name, results;
      results = [];
      for (name in handlers) {
        if (!hasProp.call(handlers, name)) continue;
        handler = handlers[name];
        results.push(WanderingCountryWithUserDatabase.prototype[name] = handler);
      }
      return results;
    };

    register(load_messages('new'));

    register(load_messages('saved'));

    WanderingCountryWithUserDatabase.prototype.update_audio_blob = seem(function*(name, file, base) {
      var doc, orig, rev, udb;
      debug('update_audio_blob', name, file, base);
      orig = base;
      switch (file.type) {
        case 'audio/mpeg':
          base += '.mp3';
          break;
        case 'audio/mp3':
          base += '.mp3';
          break;
        case 'audio/wav':
          base += '.wav';
          break;
        default:
          return Promise.reject(new Error(name + " invalid_type " + file.type));
      }
      udb = this.user_db(name);
      doc = (yield udb.get('voicemail_settings'));
      rev = (yield udb.putAttachment(doc._id, base, doc._rev, file, file.type)["catch"](function() {
        return {
          rev: null
        };
      })).rev;
      udb.close();
      return rev;
    });

    return WanderingCountryWithUserDatabase;

  })(WanderingCountryWithCCNQ);

  WanderingCountry = (function(superClass) {
    extend(WanderingCountry, superClass);

    WanderingCountry.prototype.start_monitoring = function(this_db) {
      var changes;
      debug('start_monitoring', this_db.name);
      changes = this_db.changes({
        live: true,
        since: 'now',
        include_docs: true
      });
      changes.on('change', (function(_this) {
        return function(change) {
          debug('monitor: change', change);
          return _this.ev.trigger('change', change.doc);
        };
      })(this));
      changes.on('error', (function(_this) {
        return function(error) {
          debug("monitor: error", this_db.name, error);
          setTimeout((function() {
            return _this.start_monitoring(this_db);
          }), 10 * 1000);
        };
      })(this));
      return changes;
    };

    WanderingCountry.prototype.monitor_voicemail = function(name) {
      var ref, ref1;
      if ((ref = this.monitor.voicemail) != null) {
        ref.cancel();
      }
      this.monitor.voicemail = null;
      if ((ref1 = this.monitor.voicemail_db) != null) {
        ref1.close();
      }
      this.monitor.voicemail_db = null;
      this.monitor.voicemail_db = this.user_db(name);
      this.monitor.voicemail = this.start_monitoring(this.monitor.voicemail_db);
    };

    function WanderingCountry(db, user_db, ev) {
      this.ev = ev;
      WanderingCountry.__super__.constructor.call(this, db, user_db);
      this.monitor = {};
      this.monitor.provisioning = this.start_monitoring(db);
      this.ev.one('shutdown', (function(_this) {
        return function() {
          var ref, ref1;
          _this.monitor.provisioning.cancel();
          _this.monitor.provisioning = null;
          _this.db.close();
          _this.db = null;
          if ((ref = _this.monitor.voicemail) != null) {
            ref.cancel();
          }
          _this.monitor.voicemail = null;
          if ((ref1 = _this.monitor.voicemail_db) != null) {
            ref1.close();
          }
          return _this.monitor.voicemail_db = null;
        };
      })(this));
    }

    WanderingCountry.prototype.trigger = function(event, data) {
      return this.ev.trigger(event, data);
    };

    WanderingCountry.prototype.on = function(event, handler) {
      return this.ev.on(event, handler);
    };

    WanderingCountry.prototype.one = function(event, handler) {
      return this.ev.one(event, handler);
    };

    WanderingCountry.prototype._handler = function(event, fun) {
      var handler;
      assert(event && fun, "Invalid " + event);
      return handler = (function(_this) {
        return function() {
          var args, error, on_reject, on_resolve;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          on_resolve = function(data) {
            debug(event + ":done", data);
            _this.trigger(event + ":done", data);
            return data;
          };
          on_reject = function(error) {
            debug(event + ":error");
            _this.trigger(event + ":error", error);
            return Promise.reject(error);
          };
          try {
            return fun.apply(_this, args).then(on_resolve, on_reject);
          } catch (error1) {
            error = error1;
            return on_reject(error);
          }
        };
      })(this);
    };

    WanderingCountry.prototype._wrap_on = function(event, fun) {
      var handler;
      handler = this._handler(event, fun);
      this.on(event, handler);
      return handler;
    };

    WanderingCountry.prototype._wrap_one = function(event, fun) {
      var handler;
      handler = this._handler(event, fun);
      this.one(event, handler);
      return handler;
    };

    WanderingCountry.prototype.install_handlers = function() {
      var event, events, fn, i, j, len, len1, results;
      events = ['load_devices_for_account', 'load_endpoints_for_account', 'load_endpoints_for_domain', 'load_global_numbers_for_account', 'load_global_numbers_for_local_number', 'load_local_numbers_for_account', 'load_local_numbers_for_number_domain', 'load_number_domains_for_account', 'create_domain', 'create_device', 'load_list_entries', 'add_list_entry', 'load_domain', 'load_number_domains', 'load_voicemail_settings', 'update_voicemail_settings', 'load_new_messages', 'load_saved_messages', 'update_audio_blob', 'update_prov_audio_blob', 'create_dns_for_domain', 'load_list', 'update_list', 'remove_list', 'load_number', 'update_number', 'remove_number', 'load_endpoint', 'update_endpoint', 'remove_endpoint', 'load_number_domain', 'update_number_domain', 'remove_number_domain', 'load_device', 'update_device', 'remove_device', 'monitor_voicemail'];
      fn = (function(_this) {
        return function(event) {
          event = event.replace(/-/g, '_');
          return _this._wrap_on(event, _this[event]);
        };
      })(this);
      for (i = 0, len = events.length; i < len; i++) {
        event = events[i];
        fn(event);
      }
      events = ['push_couchapp'];
      results = [];
      for (j = 0, len1 = events.length; j < len1; j++) {
        event = events[j];
        results.push((function(_this) {
          return function(event) {
            event = event.replace(/-/g, '_');
            return _this._wrap_one(event, _this[event]);
          };
        })(this)(event));
      }
      return results;
    };

    return WanderingCountry;

  })(WanderingCountryWithUserDatabase);

  app = 'wandering-country';

  module.exports = {
    WanderingCountryWithUserDatabase: WanderingCountryWithUserDatabase,
    WanderingCountryWithCCNQ: WanderingCountryWithCCNQ,
    WanderingCountry: WanderingCountry
  };

  p_fun = require('coffeescript-helpers').p_fun;

  couchapp = function(arg) {
    var extra, normalize_account;
    normalize_account = arg.normalize_account;
    extra = "var normalize_account = " + normalize_account + ";";
    return {
      _id: "_design/" + app,
      language: 'javascript',
      views: {
        numbers_by_domain: {
          map: p_fun(function(doc) {
            var m;
            if (!((doc.type != null) && doc.type === 'number')) {
              return;
            }
            if (!(m = doc._id.match(/^number:[^@]+@(.+)$/))) {
              return;
            }
            return emit(m[1]);
          }),
          reduce: '_count'
        },
        endpoints_by_domain: {
          map: p_fun(function(doc) {
            var m;
            if (!((doc.type != null) && doc.type === 'endpoint')) {
              return;
            }
            if (!(m = doc._id.match(/^endpoint:[^@]+@(.+)$/))) {
              return;
            }
            return emit(m[1]);
          })
        },
        devices: {
          map: p_fun(extra, function(doc) {
            var account;
            if (!((doc.type != null) && doc.type === 'device')) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              return emit(['account', account]);
            }
          })
        },
        number_domains: {
          map: p_fun(extra, function(doc) {
            var account;
            if (!((doc.type != null) && doc.type === 'number_domain')) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              return emit(['account', account]);
            }
          })
        },
        endpoints: {
          map: p_fun(extra, function(doc) {
            var account, m;
            if (!((doc.type != null) && doc.type === 'endpoint')) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              emit(['account', account]);
            }
            m = doc._id.match(/^endpoint:[^@]+@(.+)$/);
            if ((m != null ? m[1] : void 0) != null) {
              return emit(['domain', m[1]]);
            }
          })
        },
        local_numbers: {
          map: p_fun(extra, function(doc) {
            var account, m;
            if (!((doc.type != null) && doc.type === 'number')) {
              return;
            }
            if (!(m = doc._id.match(/^number:[^@]+@(.+)$/))) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              emit(['account', account]);
            }
            if (m[1] != null) {
              return emit(['number_domain', m[1]]);
            }
          })
        },
        global_numbers: {
          map: p_fun(extra, function(doc) {
            var account, m;
            if (!((doc.type != null) && doc.type === 'number')) {
              return;
            }
            if (m = doc._id.match(/^number:[^@]+@(.+)$/)) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              emit(['account', account]);
            }
            if (doc.local_number != null) {
              return emit(['local_number', doc.local_number]);
            }
          })
        }
      }
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC5jb2ZmZWUubWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFJO0FBQUEsTUFBQSwwS0FBQTtJQUFBOzs7OztFQUFBLEtBQUEsR0FBUSxDQUFDLE9BQUEsQ0FBUSxPQUFSLENBQUQsQ0FBQSxDQUFrQixtQkFBbEI7O0VBRVIsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSOztFQUNQLEtBQUEsR0FBUSxPQUFBLENBQVEsU0FBUjs7RUFDUixNQUFBLEdBQVMsU0FBQyxJQUFELEVBQU0sR0FBTjtJQUNQLElBQUcsQ0FBSSxJQUFQO0FBQ0UsWUFBTSxJQUFJLEtBQUosQ0FBVSxHQUFWLEVBRFI7O0VBRE87O0VBV1QsSUFBQSxHQUFPLElBQUEsQ0FBSyxVQUFDLEVBQUQsRUFBSSxFQUFKO0FBQ1YsUUFBQTtJQUFBLEtBQUEsQ0FBTSxNQUFOLEVBQWM7TUFBQyxJQUFBLEVBQUQ7S0FBZDtXQUNBLEdBQUEsR0FBTSxDQUFBLE1BQU0sRUFDVixDQUFDLEdBRFMsQ0FDTCxFQURLLENBRVYsRUFBQyxLQUFELEVBRlUsQ0FFSCxTQUFBO2FBQUc7UUFBQSxHQUFBLEVBQUssRUFBTDs7SUFBSCxDQUZHLENBQU47RUFGSSxDQUFMOztFQVFQLE1BQUEsR0FBUyxJQUFBLENBQUssVUFBQyxFQUFELEVBQUksR0FBSjtBQUNaLFFBQUE7SUFBQSxLQUFBLENBQU0sUUFBTixFQUFnQixHQUFoQjtJQUNDLE1BQU8sQ0FBQSxNQUFNLEVBQ1osQ0FBQyxHQURXLENBQ1AsR0FETyxDQUVaLEVBQUMsS0FBRCxFQUZZLENBRUwsU0FBQyxLQUFEO01BQ0wsS0FBQSxDQUFNLFVBQUEsR0FBVyxLQUFYLEdBQWlCLEdBQWpCLEdBQW9CLEtBQUssQ0FBQyxLQUFoQzthQUNBLE9BQU8sQ0FBQyxNQUFSLENBQWUsS0FBZjtJQUZLLENBRkssQ0FBTjtJQU1SLEtBQUEsQ0FBTSxXQUFOLEVBQW1CO01BQUMsS0FBQSxHQUFEO0tB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Q1YsSUFBQSxDQUFLLENBQUMsU0FBRCxFQUFXLE9BQVgsQ0FBTCxFQUZGOztZQUlBLElBQUcsd0JBQUg7cUJBQ0UsSUFBQSxDQUFLLENBQUMsY0FBRCxFQUFnQixHQUFHLENBQUMsWUFBcEIsQ0FBTCxFQURGOztVQVRnQixDQUFiLENBQUw7U0E5REY7T0FIRjs7RUFIUztBQTNpQlgiLCJzb3VyY2VzQ29udGVudCI6WyIgICAgZGVidWcgPSAocmVxdWlyZSAnZGVidWcnKSAnd2FuZGVyaW5nLWNvdW50cnknXG5cbiAgICBzZWVtID0gcmVxdWlyZSAnc2VlbSdcbiAgICBzbGVlcCA9IHJlcXVpcmUgJy4vc2xlZXAnXG4gICAgYXNzZXJ0ID0gKHRlc3QsbXNnKSAtPlxuICAgICAgaWYgbm90IHRlc3RcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIG1zZ1xuXG5HZW5lcmljIGxvYWQvY3JlYXRlL3VwZGF0ZVxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuVGhlc2UgZGVmaW5lIHRoZSBiYXNlIHNlbWFudGljcyBmb3IgdGhlIGVudGlyZSBzdWl0ZS5cblxuIyMjIGxvYWRcblxuICAgIGxvYWQgPSBzZWVtIChkYixpZCkgLT5cbiAgICAgIGRlYnVnICdsb2FkJywge2lkfVxuICAgICAgZG9jID0geWllbGQgZGJcbiAgICAgICAgLmdldCBpZFxuICAgICAgICAuY2F0Y2ggLT4gX2lkOiBpZFxuXG4jIyMgY3JlYXRlXG5cbiAgICBjcmVhdGUgPSBzZWVtIChkYixkb2MpIC0+XG4gICAgICBkZWJ1ZyAnY3JlYXRlJywgZG9jXG4gICAgICB7cmV2fSA9IHlpZWxkIGRiXG4gICAgICAgIC5wdXQgZG9jXG4gICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgZGVidWcgXCJjcmVhdGU6ICN7ZXJyb3J9ICN7ZXJyb3Iuc3RhY2t9XCJcbiAgICAgICAgICBQcm9taXNlLnJlamVjdCBlcnJvclxuXG4gICAgICBkZWJ1ZyAnY3JlYXRlIE9LJywge3Jldn1cbiAgICAgIGRvYy5fcmV2ID0gcmV2XG4gICAgICBkb2NcblxuIyMjIHVwZGF0ZVxuXG4gICAgdXBkYXRlID0gc2VlbSAoZGIsZGF0YSxyZXRyeSA9IDEpIC0+XG4gICAgICBkZWJ1ZyAndXBkYXRlJywgZGF0YVxuICAgICAgZG9jID0geWllbGQgZGJcbiAgICAgICAgLmdldCBkYXRhLl9pZFxuICAgICAgICAuY2F0Y2ggLT4gZGF0YVxuXG4gICAgICBkZWJ1ZyAndXBkYXRlOiBnZXQnLCBkb2NcbiAgICAgIGZvciBrLHYgb2YgZGF0YSB3aGVuIGtbMF0gaXNudCAnXydcbiAgICAgICAgZG9jW2tdID0gdlxuXG4gICAgICBkb2MuX2RlbGV0ZWQgPSBkYXRhLl9kZWxldGVkIGlmIGRhdGEuX2RlbGV0ZWRcblxuICAgICAgZGVidWcgJ3VwZGF0ZTogcHV0JywgZG9jXG4gICAgICB7cmV2fSA9IHlpZWxkIGRiXG4gICAgICAgIC5wdXQgZG9jXG4gICAgICAgIC5jYXRjaCBzZWVtIChlcnJvcikgLT5cbiAgICAgICAgICBkZWJ1ZyBcIiN7ZXJyb3J9ICN7ZXJyb3Iuc3RhY2t9XCJcbiAgICAgICAgICBpZiByZXRyeSA+IDBcbiAgICAgICAgICAgIHlpZWxkIHNsZWVwIDUwMFxuICAgICAgICAgICAgeWllbGQgdXBkYXRlIGRiLCBkYXRhLCByZXRyeS0xXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QgZXJyb3JcblxuICAgICAgZG9jLl9yZXYgPSByZXZcbiAgICAgIGRvY1xuXG5CYXNlIGNsYXNzXG4tLS0tLS0tLS0tXG5cblBhcmFtZXRlcnM6IGBkYmAgaXMgYSBQb3VjaERCIGluc3RhbmNlIG9mIGEgcHJvdmlzaW9uaW5nIGRhdGFiYXNlLlxuXG4gICAgY2xhc3MgV2FuZGVyaW5nQ291bnRyeUJhc2VcbiAgICAgIGNvbnN0cnVjdG9yOiAoQGRiKSAtPlxuXG4gICAgICBsb2FkOiAoaWQpIC0+XG4gICAgICAgIGxvYWQgQGRiLCBpZFxuXG4gICAgICB1cGRhdGU6IChkYXRhKSAtPlxuICAgICAgICB1cGRhdGUgQGRiLCBkYXRhXG5cbiAgICAgIGNyZWF0ZTogKGRhdGEpIC0+XG4gICAgICAgIGNyZWF0ZSBAZGIsIGRhdGFcblxuQ0NOUSBvcGVyYXRpb25zXG4tLS0tLS0tLS0tLS0tLS1cblxuVGhlc2UgcmVseSBlaXRoZXIgb24gdGhlIGNvdWNoYXBwLCBvciBhcmUgc3RhbmRhcmQgZGF0YWJhc2UgYWNjZXNzLlxuXG4gICAgY2xhc3MgV2FuZGVyaW5nQ291bnRyeVdpdGhDQ05RIGV4dGVuZHMgV2FuZGVyaW5nQ291bnRyeUJhc2VcblxuQ29mZmVlLXNjcmlwdCByZXByZXNlbnRhdGlvbiBvZiBhIG1vZHVsZSB3aGljaCBleHBvcnRzIGEgZnVuY3Rpb24gdGhhdCByZXdyaXRlcyBhbiBhY2NvdW50IGludG8gYSBjYW5vbmljYWwgZm9ybS5cblxuICAgICAgbm9ybWFsaXplX2FjY291bnQ6ICcnJ1xuICAgICAgICBmdW5jdGlvbihhY2NvdW50KSB7IHJldHVybiBhY2NvdW50IH1cbiAgICAgICcnJ1xuXG4jIyMgTG9hZC12aWEtcXVlcnlcblxuICAgICAgZ2VuZXJpY19sb2FkID0gKG5hbWUpIC0+XG4gICAgICAgIHNlZW0gKGtleSkgLT5cbiAgICAgICAgICBkZWJ1ZyBcImdlbmVyaWNfbG9hZCAje25hbWV9XCIsIGtleVxuICAgICAgICAgIHtyb3dzfSA9IHlpZWxkIEBkYlxuICAgICAgICAgICAgLnF1ZXJ5IFwiI3thcHB9LyN7bmFtZX1cIixcbiAgICAgICAgICAgICAgcmVkdWNlOiBmYWxzZVxuICAgICAgICAgICAgICBpbmNsdWRlX2RvY3M6IHRydWVcbiAgICAgICAgICAgICAga2V5OiBrZXlcbiAgICAgICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgICAgIGRlYnVnIFwiZ2VuZXJpY19sb2FkICN7bmFtZX0gRmFpbGVkOiAje2Vycm9yfSAje2Vycm9yLnN0YWNrfVwiXG4gICAgICAgICAgICAgIFByb21pc2UucmVqZWN0IGVycm9yXG4gICAgICAgICAgZGVidWcgXCJnZW5lcmljX2xvYWQgI3tuYW1lfSBPS1wiLCBrZXksIHJvd3NcbiAgICAgICAgICBkb2NzID0gcm93cy5tYXAgKHJvdykgLT4gcm93LmRvY1xuXG4gICAgICBkZXZpY2VzX2ZvcjogZ2VuZXJpY19sb2FkICdkZXZpY2VzJ1xuICAgICAgZW5kcG9pbnRzX2ZvcjogZ2VuZXJpY19sb2FkICdlbmRwb2ludHMnXG4gICAgICBnbG9iYWxfbnVtYmVyc19mb3I6IGdlbmVyaWNfbG9hZCAnZ2xvYmFsX251bWJlcnMnXG4gICAgICBsb2NhbF9udW1iZXJzX2ZvcjogZ2VuZXJpY19sb2FkICdsb2NhbF9udW1iZXJzJ1xuICAgICAgbnVtYmVyX2RvbWFpbnNfZm9yOiBnZW5lcmljX2xvYWQgJ251bWJlcl9kb21haW5zJ1xuXG4gICAgICBsb2FkX2RldmljZXNfZm9yX2FjY291bnQ6IChhY2NvdW50KSAtPiBAZGV2aWNlc19mb3IgWydhY2NvdW50JyxhY2NvdW50XVxuICAgICAgbG9hZF9lbmRwb2ludHNfZm9yX2FjY291bnQ6IChhY2NvdW50KSAtPiBAZW5kcG9pbnRzX2ZvciBbJ2FjY291bnQnLGFjY291bnRdXG4gICAgICBsb2FkX2VuZHBvaW50c19mb3JfZG9tYWluOiAoZG9tYWluKSAtPiBAZW5kcG9pbnRzX2ZvciBbJ2RvbWFpbicsZG9tYWluXVxuICAgICAgbG9hZF9nbG9iYWxfbnVtYmVyc19mb3JfYWNjb3VudDogKGFjY291bnQpIC0+IEBnbG9iYWxfbnVtYmVyc19mb3IgWydhY2NvdW50JyxhY2NvdW50XVxuICAgICAgbG9hZF9nbG9iYWxfbnVtYmVyc19mb3JfbG9jYWxfbnVtYmVyOiAobG9jYWxfbnVtYmVyKSAtPiBAZ2xvYmFsX251bWJlcnNfZm9yIFsnbG9jYWxfbnVtYmVyJyxsb2NhbF9udW1iZXJdXG4gICAgICBsb2FkX2xvY2FsX251bWJlcnNfZm9yX2FjY291bnQ6IChhY2NvdW50KSAtPiBAbG9jYWxfbnVtYmVyc19mb3IgWydhY2NvdW50JyxhY2NvdW50XVxuICAgICAgbG9hZF9sb2NhbF9udW1iZXJzX2Zvcl9udW1iZXJfZG9tYWluOiAobnVtYmVyX2RvbWFpbikgLT4gQGxvY2FsX251bWJlcnNfZm9yIFsnbnVtYmVyX2RvbWFpbicsbnVtYmVyX2RvbWFpbl1cbiAgICAgIGxvYWRfbnVtYmVyX2RvbWFpbnNfZm9yX2FjY291bnQ6IChhY2NvdW50KSAtPiBAbnVtYmVyX2RvbWFpbnNfZm9yIFsnYWNjb3VudCcsYWNjb3VudF1cblxuIyMjIENyZWF0ZVxuXG4gICAgICBjcmVhdGVfZG9tYWluOiAoZG9jKSA9PlxuICAgICAgICBkb2MudHlwZSA9ICdkb21haW4nXG4gICAgICAgIEBjcmVhdGUgZG9jXG5cbiAgICAgIGNyZWF0ZV9kZXZpY2U6IChkb2MpID0+XG4gICAgICAgIGRvYy50eXBlID0gJ2RldmljZSdcbiAgICAgICAgQGNyZWF0ZSBkb2NcblxuIyMjIEJ1aWxkIGxpc3Qgb2YgYGxpc3Q6YCBpdGVtcyBmb3IgYSBnaXZlbiBudW1iZXJcblxuICAgICAgbG9hZF9saXN0X2VudHJpZXM6IHNlZW0gKG51bWJlcikgLT5cbiAgICAgICAgZGVidWcgJ2xvYWRfbGlzdF9lbnRyaWVzJywgbnVtYmVyXG4gICAgICAgIHtyb3dzfSA9IHlpZWxkIEBkYlxuICAgICAgICAgIC5hbGxEb2NzXG4gICAgICAgICAgICBzdGFydGtleTogXCJsaXN0OiN7bnVtYmVyfUBcIlxuICAgICAgICAgICAgZW5ka2V5OiBcImxpc3Q6I3tudW1iZXJ9QFxcdWZmZmZcIlxuICAgICAgICAgICAgaW5jbHVkZV9kb2NzOnRydWVcbiAgICAgICAgICAuY2F0Y2ggKGVycm9yKSAtPlxuICAgICAgICAgICAgZGVidWcgXCJsb2FkX2xpc3RfZW50cmllczogI3tlcnJvcn0gI3tlcnJvci5zdGFja31cIlxuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QgZXJyb3JcbiAgICAgICAgZG9jcyA9IHJvd3MubWFwIChyb3cpIC0+IHJvdy5kb2NcblxuIyMjIEFkZCBhIG5ldyBgbGlzdDpgIGl0ZW1cblxuICAgICAgYWRkX2xpc3RfZW50cnk6IHNlZW0gKGRvYykgLT5cbiAgICAgICAgZGVidWcgJ2FkZF9saXN0X2VudHJ5JywgZG9jXG4gICAgICAgIHVubGVzcyBkb2MuYmxhY2tsaXN0IGlzIHRydWUgb3IgZG9jLndoaXRlbGlzdCBpcyB0cnVlXG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgZG9jLl9pZCA9IFwibGlzdDoje2RvYy5udW1iZXJ9QCN7ZG9jLmNhbGxpbmdfbnVtYmVyfVwiXG4gICAgICAgIGRvYy50eXBlID0gJ2xpc3QnXG4gICAgICAgIGRlYnVnICdhZGRfbGlzdF9lbnRyeScsIGRvY1xuICAgICAgICB7cmV2fSA9IHlpZWxkIEBkYlxuICAgICAgICAgIC5wdXQgZG9jXG4gICAgICAgICAgLmNhdGNoIChlcnJvcikgLT5cbiAgICAgICAgICAgIGRlYnVnIFwiYWRkX2xpc3RfZW50cnkgI3tlcnJvcn0gI3tlcnJvci5zdGFja31cIlxuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QgZXJyb3JcbiAgICAgICAgcmV2XG5cbiMjIyBMb2FkIGEgc2luZ2xlIG51bWJlciBkb21haW5cblxuICAgICAgbG9hZF9kb21haW46IHNlZW0gKG5hbWUpIC0+XG5cbkxvYWQgdGhlIG51bWJlci1kb21haW5cblxuICAgICAgICBkZWJ1ZyAnbG9hZF9kb21haW4nLCBuYW1lXG4gICAgICAgIG51bWJlcl9kb21haW4gPSB5aWVsZCBAZGJcbiAgICAgICAgICAuZ2V0IFwibnVtYmVyX2RvbWFpbjoje25hbWV9XCJcbiAgICAgICAgICAuY2F0Y2ggLT4gbnVsbFxuXG4gICAgICAgIHVubGVzcyBudW1iZXJfZG9tYWluP1xuICAgICAgICAgIGRlYnVnICdubyBudW1iZXJfZG9tYWluJywgbmFtZVxuICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIHVubGVzcyBudW1iZXJfZG9tYWluLmRpYWxwbGFuIGlzICdjZW50cmV4J1xuICAgICAgICAgIGRlYnVnICdudW1iZXJfZG9tYWluIGlzIG5vdCBjZW50cmV4JywgbmFtZSwgbnVtYmVyX2RvbWFpblxuICAgICAgICAgIHJldHVyblxuXG5Mb2FkIHRoZSBhc3NvY2lhdGVkIEROUyBkb21haW5cblxuICAgICAgICBkb21haW4gPSB5aWVsZCBAZGJcbiAgICAgICAgICAuZ2V0IFwiZG9tYWluOiN7bmFtZX1cIlxuICAgICAgICAgIC5jYXRjaCAtPiBudWxsXG5cbiAgICAgICAgdW5sZXNzIGRvbWFpbj9cbiAgICAgICAgICBkZWJ1ZyAnbm8gZG9tYWluJywgbmFtZVxuICAgICAgICAgIHJldHVyblxuXG5Mb2FkIHRoZSBudW1iZXJzIGluIHRoZSBkb21haW4gKGluY2x1ZGluZyB0aGUgZGlzYWJsZWQgb25lcylcblxuICAgICAgICB7cm93c30gPSB5aWVsZCBAZGJcbiAgICAgICAgICAucXVlcnkgXCIje2FwcH0vbnVtYmVyc19ieV9kb21haW5cIixcbiAgICAgICAgICAgIHJlZHVjZTogZmFsc2VcbiAgICAgICAgICAgIGluY2x1ZGVfZG9jczogdHJ1ZVxuICAgICAgICAgICAga2V5OiBuYW1lXG4gICAgICAgICAgLmNhdGNoIC0+XG4gICAgICAgICAgICByb3dzOm51bGxcblxuICAgICAgICB1bmxlc3Mgcm93cz9cbiAgICAgICAgICBkZWJ1ZyAnbm8gbnVtYmVyc19ieV9kb21haW4nLCBuYW1lXG4gICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgbnVtYmVycyA9IHJvd3MubWFwIChyb3cpIC0+IHJvdy5kb2NcblxuTG9hZCB0aGUgZW5kcG9pbnRzIGluIHRoZSBkb21haW4gKGluY2x1ZGluZyB0aGUgZGlzYWJsZWQgb25lcylcblxuICAgICAgICB7cm93c30gPSB5aWVsZCBAZGJcbiAgICAgICAgICAucXVlcnkgXCIje2FwcH0vZW5kcG9pbnRzX2J5X2RvbWFpblwiLFxuICAgICAgICAgICAgcmVkdWNlOiBmYWxzZVxuICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiB0cnVlXG4gICAgICAgICAgICBrZXk6IG5hbWVcbiAgICAgICAgICAuY2F0Y2ggLT5cbiAgICAgICAgICAgIHJvd3M6bnVsbFxuXG4gICAgICAgIHVubGVzcyByb3dzP1xuICAgICAgICAgIGRlYnVnICdubyBlbmRwb2ludHNfYnlfZG9tYWluJywgbmFtZVxuICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIGVuZHBvaW50cyA9IHJvd3MubWFwIChyb3cpIC0+IHJvdy5kb2NcblxuU2VuZCB0aGUgcmVzdWx0XG5cbiAgICAgICAgcmVzdWx0ID0ge2RvbWFpbixudW1iZXJfZG9tYWluLG51bWJlcnMsZW5kcG9pbnRzfVxuICAgICAgICBkZWJ1ZyAnbG9hZF9kb21haW4nLCByZXN1bHRcbiAgICAgICAgcmVzdWx0XG5cbiMjIyBCdWlsZCBudW1iZXIgZG9tYWlucyBsaXN0XG5cbiAgICAgIGxvYWRfbnVtYmVyX2RvbWFpbnM6IHNlZW0gLT5cbiAgICAgICAgZGVidWcgJ2xvYWRfbnVtYmVyX2RvbWFpbnMnXG5cbiAgICAgICAge3Jvd3N9ID0geWllbGQgQGRiXG4gICAgICAgICAgLmFsbERvY3NcbiAgICAgICAgICAgIHN0YXJ0a2V5OiAnbnVtYmVyX2RvbWFpbjonXG4gICAgICAgICAgICBlbmRrZXk6ICdudW1iZXJfZG9tYWluOlxcdWZmZmYnXG4gICAgICAgICAgLmNhdGNoIChlcnJvcikgLT5cbiAgICAgICAgICAgIGRlYnVnIFwibG9hZF9udW1iZXJfZG9tYWluczogI3tlcnJvci5zdGFjayA/IGVycm9yfVwiXG4gICAgICAgICAgICBQcm9taXNlLnJlamVjdCBlcnJvclxuXG4gICAgICAgIGRlYnVnICdsb2FkX251bWJlcl9kb21haW5zJywgcm93c1xuXG4gICAgICAgIHJvd3MubWFwIChyb3cpIC0+XG4gICAgICAgICAgbSA9IHJvdy5pZC5tYXRjaCAvXm51bWJlcl9kb21haW46KC4rKSQvXG4gICAgICAgICAgbmFtZTogbVsxXSwgbGFiZWw6IG1bMV1cblxuIyMjIEluc3RhbGwgdGhlIENvdWNoIEFwcCBvbiB0aGUgc2VydmVyXG5cbiAgICAgIHB1c2hfY291Y2hhcHA6IC0+XG4gICAgICAgIGRvYyA9IGNvdWNoYXBwIHtAbm9ybWFsaXplX2FjY291bnR9XG4gICAgICAgIGRlYnVnICdjb3VjaGFwcCcsIGRvY1xuICAgICAgICBAdXBkYXRlIGRvY1xuICAgICAgICAuY2F0Y2ggLT4gZmFsc2VcblxuIyMjIEJ1aWxkIGdlbmVyaWMgbG9hZC91cGRhdGUvcmVtb3ZlIGZvciB2YXJpb3VzIHR5cGVzXG5cbiAgICAgIHByZWZpeF9oYW5kbGVycyA9IChwcmVmaXgpIC0+XG5cbiAgICAgICAgXCJsb2FkXyN7cHJlZml4fVwiOiAoaWQpIC0+XG4gICAgICAgICAgQGxvYWQgXCIje3ByZWZpeH06I3tpZH1cIiwgXCJsb2FkXyN7cHJlZml4fVwiXG5cbiAgICAgICAgXCJ1cGRhdGVfI3twcmVmaXh9XCI6IChkYXRhKSAtPlxuICAgICAgICAgIEB1cGRhdGUgZGF0YSwgXCJ1cGRhdGVfI3twcmVmaXh9XCJcblxuICAgICAgICBcInJlbW92ZV8je3ByZWZpeH1cIjogKGRhdGEpIC0+XG4gICAgICAgICAgZGF0YS5fZGVsZXRlZCA9IHRydWVcbiAgICAgICAgICBAdXBkYXRlIGRhdGEsIFwicmVtb3ZlXyN7cHJlZml4fVwiXG5cbiAgICAgIHJlZ2lzdGVyID0gKGhhbmRsZXJzKSA9PlxuICAgICAgICBmb3Igb3duIG5hbWUsIGhhbmRsZXIgb2YgaGFuZGxlcnNcbiAgICAgICAgICB0aGlzOjpbbmFtZV0gPSBoYW5kbGVyXG5cbiAgICAgIHJlZ2lzdGVyIHByZWZpeF9oYW5kbGVycyAnbGlzdCdcbiAgICAgIHJlZ2lzdGVyIHByZWZpeF9oYW5kbGVycyAnbnVtYmVyJ1xuICAgICAgcmVnaXN0ZXIgcHJlZml4X2hhbmRsZXJzICdlbmRwb2ludCdcbiAgICAgIHJlZ2lzdGVyIHByZWZpeF9oYW5kbGVycyAnbnVtYmVyX2RvbWFpbidcbiAgICAgIHJlZ2lzdGVyIHByZWZpeF9oYW5kbGVycyAnZGV2aWNlJ1xuXG4jIyMgU2F2ZSBhdWRpby9tdXNpY1xuXG4gICAgICB1cGRhdGVfcHJvdl9hdWRpb19ibG9iOiBzZWVtIChpZCwgZmlsZSwgYmFzZSwgb3B0cykgLT5cbiAgICAgICAgZGVidWcgJ3VwZGF0ZV9wcm92X2F1ZGlvX2Jsb2InLCBpZCwgYmFzZSwgb3B0c1xuICAgICAgICBvcmlnID0gYmFzZVxuICAgICAgICBzd2l0Y2ggZmlsZS50eXBlXG4gICAgICAgICAgd2hlbiAnYXVkaW8vbXBlZydcbiAgICAgICAgICAgIGJhc2UgKz0gJy5tcDMnXG4gICAgICAgICAgd2hlbiAnYXVkaW8vbXAzJ1xuICAgICAgICAgICAgYmFzZSArPSAnLm1wMydcbiAgICAgICAgICB3aGVuICdhdWRpby93YXYnXG4gICAgICAgICAgICBiYXNlICs9ICcud2F2J1xuICAgICAgICAgIHdoZW4gJ2F1ZGlvL3gtd2F2J1xuICAgICAgICAgICAgYmFzZSArPSAnLndhdidcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QgbmV3IEVycm9yIFwidXBkYXRlX3Byb3ZfYXVkaW9fYmxvYiBpbnZhbGlkX3R5cGUgI3tmaWxlLnR5cGV9XCJcblxuICAgICAgICBkb2MgPSB5aWVsZCBAZGIuZ2V0IGlkXG4gICAgICAgIGEgPSB7cmV2fSA9IHlpZWxkIEBkYlxuICAgICAgICAgIC5wdXRBdHRhY2htZW50IGRvYy5faWQsIGJhc2UsIGRvYy5fcmV2LCBmaWxlLCBmaWxlLnR5cGVcbiAgICAgICAgICAuY2F0Y2ggKGVycm9yKSAtPlxuICAgICAgICAgICAgZGVidWcgXCJ1cGRhdGVfcHJvdl9hdWRpb19ibG9iICN7ZXJyb3J9ICN7ZXJyb3Iuc3RhY2t9XCJcbiAgICAgICAgICAgIFByb21pc2UucmVqZWN0IGVycm9yXG4gICAgICAgIG9yaWdcblxuIyMjIEROUyBSZWNvcmRzXG5cbiAgICAgIGNyZWF0ZV9kbnNfZm9yX2RvbWFpbjogc2VlbSAoZG9tYWluKSAtPlxuICAgICAgICBkZWJ1ZyAnY3JlYXRlX2Ruc19mb3JfZG9tYWluJywgZG9tYWluXG4gICAgICAgIGNmZyA9IHlpZWxkIEBkbnNfZm9yX2RvbWFpbiBkb21haW5cbiAgICAgICAgZGVidWcgJ2NyZWF0ZV9kbnNfZm9yX2RvbWFpbiwgY2ZnJywgY2ZnXG5cbiAgICAgICAgdW5sZXNzIGNmZy5zb2E/IGFuZCBjZmcuYWRtaW4/IGFuZCBjZmcucmVjb3Jkcz9cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QgbmV3IEVycm9yICdpbnZhbGlkIGNvbmZpZ3VyYXRpb24nXG5cbiAgICAgICAgZG9jID1cbiAgICAgICAgICBfaWQ6IFwiZG9tYWluOiN7ZG9tYWlufVwiXG4gICAgICAgICAgZG9tYWluOiBkb21haW5cbiAgICAgICAgICB0eXBlOiAnZG9tYWluJ1xuICAgICAgICAgIHNvYTogY2ZnLnNvYVxuICAgICAgICAgIGFkbWluOiBjZmcuYWRtaW5cbiAgICAgICAgICByZWNvcmRzOiBjZmcucmVjb3Jkc1xuXG4gICAgICAgIHlpZWxkIEB1cGRhdGUgZG9jXG5cbkV4dGVuZCB3aXRoIFVzZXItRGF0YWJhc2VzXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5QYXJhbWV0ZXJzOiBgdXNlcl9kYmAgY29udmVydHMgYSB1c2VyIGRhdGFiYXNlIG5hbWUgaW50byBhIFBvdWNoREIgb2JqZWN0LlxuXG4gICAgY2xhc3MgV2FuZGVyaW5nQ291bnRyeVdpdGhVc2VyRGF0YWJhc2UgZXh0ZW5kcyBXYW5kZXJpbmdDb3VudHJ5V2l0aENDTlFcblxuICAgICAgY29uc3RydWN0b3I6IChkYixAdXNlcl9kYikgLT5cbiAgICAgICAgc3VwZXIgZGJcblxuIyMjIExvYWQvdXBkYXRlIGEgdXNlciBkYXRhYmFzZSdzIHZvaWNlbWFpbC1zZXR0aW5nc1xuXG4gICAgICBsb2FkX3ZvaWNlbWFpbF9zZXR0aW5nczogc2VlbSAobmFtZSkgLT5cbiAgICAgICAgZGVidWcgJ2xvYWRfdm9pY2VtYWlsX3NldHRpbmdzJywge25hbWV9XG4gICAgICAgIHVkYiA9IEB1c2VyX2RiIG5hbWVcbiAgICAgICAgZG9jID0geWllbGQgbG9hZCB1ZGIsICd2b2ljZW1haWxfc2V0dGluZ3MnXG4gICAgICAgIHVkYi5jbG9zZSgpXG4gICAgICAgIGRvY1xuXG4gICAgICB1cGRhdGVfdm9pY2VtYWlsX3NldHRpbmdzOiBzZWVtIChuYW1lLGRhdGEpIC0+XG4gICAgICAgIGRlYnVnICd1cGRhdGVfdm9pY2VtYWlsX3NldHRpbmdzJywge25hbWUsZGF0YX1cbiAgICAgICAgdWRiID0gQHVzZXJfZGIgbmFtZVxuICAgICAgICBkb2MgPSB5aWVsZCB1cGRhdGUgdWRiLCBkYXRhXG4gICAgICAgIHVkYi5jbG9zZSgpXG4gICAgICAgIGRvY1xuXG4jIyMgTG9hZCBhIHVzZXIncyBtZXNzYWdlc1xuXG4gICAgICBsb2FkX21lc3NhZ2VzID0gKGNhdCkgLT5cbiAgICAgICAgXCJsb2FkXyN7Y2F0fV9tZXNzYWdlc1wiOiBzZWVtIChuYW1lKSAtPlxuICAgICAgICAgIHVkYiA9IEB1c2VyX2RiIG5hbWVcbiAgICAgICAgICB7cm93c30gPSB5aWVsZCB1ZGJcbiAgICAgICAgICAgIC5xdWVyeSBcInZvaWNlbWFpbC8je2NhdH1fbWVzc2FnZXNcIixcbiAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiB0cnVlXG4gICAgICAgICAgICAuY2F0Y2ggLT4gcm93czpudWxsXG4gICAgICAgICAgcmVzdWx0ID0gcm93cz8ubWFwIChyb3cpIC0+IHJvdy5kb2NcbiAgICAgICAgICB1ZGIuY2xvc2UoKVxuICAgICAgICAgIHJlc3VsdFxuXG4gICAgICByZWdpc3RlciA9IChoYW5kbGVycykgPT5cbiAgICAgICAgZm9yIG93biBuYW1lLCBoYW5kbGVyIG9mIGhhbmRsZXJzXG4gICAgICAgICAgdGhpczo6W25hbWVdID0gaGFuZGxlclxuXG4gICAgICByZWdpc3RlciBsb2FkX21lc3NhZ2VzICduZXcnXG4gICAgICByZWdpc3RlciBsb2FkX21lc3NhZ2VzICdzYXZlZCdcblxuIyMjIFNhdmUgbXVzaWNcblxuICAgICAgdXBkYXRlX2F1ZGlvX2Jsb2I6IHNlZW0gKG5hbWUsIGZpbGUsIGJhc2UpIC0+XG4gICAgICAgIGRlYnVnICd1cGRhdGVfYXVkaW9fYmxvYicsIG5hbWUsIGZpbGUsIGJhc2VcbiAgICAgICAgb3JpZyA9IGJhc2VcbiAgICAgICAgc3dpdGNoIGZpbGUudHlwZVxuICAgICAgICAgIHdoZW4gJ2F1ZGlvL21wZWcnXG4gICAgICAgICAgICBiYXNlICs9ICcubXAzJ1xuICAgICAgICAgIHdoZW4gJ2F1ZGlvL21wMydcbiAgICAgICAgICAgIGJhc2UgKz0gJy5tcDMnXG4gICAgICAgICAgd2hlbiAnYXVkaW8vd2F2J1xuICAgICAgICAgICAgYmFzZSArPSAnLndhdidcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QgbmV3IEVycm9yIFwiI3tuYW1lfSBpbnZhbGlkX3R5cGUgI3tmaWxlLnR5cGV9XCJcblxuICAgICAgICB1ZGIgPSBAdXNlcl9kYiBuYW1lXG4gICAgICAgIGRvYyA9IHlpZWxkIHVkYi5nZXQgJ3ZvaWNlbWFpbF9zZXR0aW5ncydcbiAgICAgICAge3Jldn0gPSB5aWVsZCB1ZGJcbiAgICAgICAgICAucHV0QXR0YWNobWVudCBkb2MuX2lkLCBiYXNlLCBkb2MuX3JldiwgZmlsZSwgZmlsZS50eXBlXG4gICAgICAgICAgLmNhdGNoIC0+IHJldjpudWxsXG5cbiAgICAgICAgdWRiLmNsb3NlKClcbiAgICAgICAgcmV2XG5cbldyYXAgd2l0aCBldmVudHNcbi0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNsYXNzIFdhbmRlcmluZ0NvdW50cnkgZXh0ZW5kcyBXYW5kZXJpbmdDb3VudHJ5V2l0aFVzZXJEYXRhYmFzZVxuXG4jIyMgRXh0ZW5kIHdpdGggbW9uaXRvcmluZ1xuXG4gICAgICBzdGFydF9tb25pdG9yaW5nOiAodGhpc19kYikgLT5cbiAgICAgICAgZGVidWcgJ3N0YXJ0X21vbml0b3JpbmcnLCB0aGlzX2RiLm5hbWVcbiAgICAgICAgY2hhbmdlcyA9IHRoaXNfZGIuY2hhbmdlc1xuICAgICAgICAgIGxpdmU6IHRydWVcbiAgICAgICAgICBzaW5jZTogJ25vdydcbiAgICAgICAgICBpbmNsdWRlX2RvY3M6IHRydWVcblxuICAgICAgICBjaGFuZ2VzLm9uICdjaGFuZ2UnLCAoY2hhbmdlKSA9PlxuICAgICAgICAgIGRlYnVnICdtb25pdG9yOiBjaGFuZ2UnLCBjaGFuZ2VcbiAgICAgICAgICBAZXYudHJpZ2dlciAnY2hhbmdlJywgY2hhbmdlLmRvY1xuXG4gICAgICAgIGNoYW5nZXMub24gJ2Vycm9yJywgKGVycm9yKSA9PlxuICAgICAgICAgIGRlYnVnIFwibW9uaXRvcjogZXJyb3JcIiwgdGhpc19kYi5uYW1lLCBlcnJvclxuICAgICAgICAgIHNldFRpbWVvdXQgKD0+IEBzdGFydF9tb25pdG9yaW5nIHRoaXNfZGIpLCAxMCoxMDAwXG4gICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgY2hhbmdlc1xuXG4gICAgICBtb25pdG9yX3ZvaWNlbWFpbDogKG5hbWUpIC0+XG4gICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbD8uY2FuY2VsKClcbiAgICAgICAgQG1vbml0b3Iudm9pY2VtYWlsID0gbnVsbFxuICAgICAgICBAbW9uaXRvci52b2ljZW1haWxfZGI/LmNsb3NlKClcbiAgICAgICAgQG1vbml0b3Iudm9pY2VtYWlsX2RiID0gbnVsbFxuXG4gICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbF9kYiA9IEB1c2VyX2RiIG5hbWVcbiAgICAgICAgQG1vbml0b3Iudm9pY2VtYWlsID0gQHN0YXJ0X21vbml0b3JpbmcgQG1vbml0b3Iudm9pY2VtYWlsX2RiXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGNvbnN0cnVjdG9yOiAoZGIsdXNlcl9kYixAZXYpIC0+XG4gICAgICAgIHN1cGVyIGRiLCB1c2VyX2RiXG5cbiAgICAgICAgQG1vbml0b3IgPSB7fVxuXG4gICAgICAgIEBtb25pdG9yLnByb3Zpc2lvbmluZyA9IEBzdGFydF9tb25pdG9yaW5nIGRiXG5cbiAgICAgICAgQGV2Lm9uZSAnc2h1dGRvd24nLCA9PlxuICAgICAgICAgIEBtb25pdG9yLnByb3Zpc2lvbmluZy5jYW5jZWwoKVxuICAgICAgICAgIEBtb25pdG9yLnByb3Zpc2lvbmluZyA9IG51bGxcbiAgICAgICAgICBAZGIuY2xvc2UoKVxuICAgICAgICAgIEBkYiA9IG51bGxcblxuICAgICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbD8uY2FuY2VsKClcbiAgICAgICAgICBAbW9uaXRvci52b2ljZW1haWwgPSBudWxsXG4gICAgICAgICAgQG1vbml0b3Iudm9pY2VtYWlsX2RiPy5jbG9zZSgpXG4gICAgICAgICAgQG1vbml0b3Iudm9pY2VtYWlsX2RiID0gbnVsbFxuXG4jIyMgRXZlbnRzXG5cbiAgICAgIHRyaWdnZXI6IChldmVudCxkYXRhKSAtPlxuICAgICAgICBAZXYudHJpZ2dlciBldmVudCwgZGF0YVxuXG4gICAgICBvbjogKGV2ZW50LGhhbmRsZXIpIC0+XG4gICAgICAgIEBldi5vbiBldmVudCwgaGFuZGxlclxuXG4gICAgICBvbmU6IChldmVudCxoYW5kbGVyKSAtPlxuICAgICAgICBAZXYub25lIGV2ZW50LCBoYW5kbGVyXG5cbiAgICAgIF9oYW5kbGVyOiAoZXZlbnQsZnVuKSAtPlxuICAgICAgICBhc3NlcnQgKGV2ZW50IGFuZCBmdW4pLCBcIkludmFsaWQgI3tldmVudH1cIlxuICAgICAgICBoYW5kbGVyID0gKGFyZ3MuLi4pID0+XG4gICAgICAgICAgb25fcmVzb2x2ZSA9IChkYXRhKSA9PlxuICAgICAgICAgICAgZGVidWcgXCIje2V2ZW50fTpkb25lXCIsIGRhdGFcbiAgICAgICAgICAgIEB0cmlnZ2VyIFwiI3tldmVudH06ZG9uZVwiLCBkYXRhXG4gICAgICAgICAgICBkYXRhXG4gICAgICAgICAgb25fcmVqZWN0ID0gKGVycm9yKSA9PlxuICAgICAgICAgICAgZGVidWcgXCIje2V2ZW50fTplcnJvclwiXG4gICAgICAgICAgICBAdHJpZ2dlciBcIiN7ZXZlbnR9OmVycm9yXCIsIGVycm9yXG4gICAgICAgICAgICBQcm9taXNlLnJlamVjdCBlcnJvclxuICAgICAgICAgIHRyeVxuICAgICAgICAgICAgZnVuXG4gICAgICAgICAgICAgIC5hcHBseSB0aGlzLCBhcmdzXG4gICAgICAgICAgICAgIC50aGVuIG9uX3Jlc29sdmUsIG9uX3JlamVjdFxuICAgICAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgICAgICBvbl9yZWplY3QgZXJyb3JcblxuICAgICAgX3dyYXBfb246IChldmVudCxmdW4pIC0+XG4gICAgICAgIGhhbmRsZXIgPSBAX2hhbmRsZXIgZXZlbnQsIGZ1blxuICAgICAgICBAb24gZXZlbnQsIGhhbmRsZXJcbiAgICAgICAgaGFuZGxlclxuXG4gICAgICBfd3JhcF9vbmU6IChldmVudCxmdW4pIC0+XG4gICAgICAgIGhhbmRsZXIgPSBAX2hhbmRsZXIgZXZlbnQsIGZ1blxuICAgICAgICBAb25lIGV2ZW50LCBoYW5kbGVyXG4gICAgICAgIGhhbmRsZXJcblxuICAgICAgaW5zdGFsbF9oYW5kbGVyczogLT5cbiAgICAgICAgZXZlbnRzID0gW1xuICAgICAgICAgICdsb2FkX2RldmljZXNfZm9yX2FjY291bnQnXG4gICAgICAgICAgJ2xvYWRfZW5kcG9pbnRzX2Zvcl9hY2NvdW50J1xuICAgICAgICAgICdsb2FkX2VuZHBvaW50c19mb3JfZG9tYWluJ1xuICAgICAgICAgICdsb2FkX2dsb2JhbF9udW1iZXJzX2Zvcl9hY2NvdW50J1xuICAgICAgICAgICdsb2FkX2dsb2JhbF9udW1iZXJzX2Zvcl9sb2NhbF9udW1iZXInXG4gICAgICAgICAgJ2xvYWRfbG9jYWxfbnVtYmVyc19mb3JfYWNjb3VudCdcbiAgICAgICAgICAnbG9hZF9sb2NhbF9udW1iZXJzX2Zvcl9udW1iZXJfZG9tYWluJ1xuICAgICAgICAgICdsb2FkX251bWJlcl9kb21haW5zX2Zvcl9hY2NvdW50J1xuICAgICAgICAgICdjcmVhdGVfZG9tYWluJ1xuICAgICAgICAgICdjcmVhdGVfZGV2aWNlJ1xuICAgICAgICAgICdsb2FkX2xpc3RfZW50cmllcydcbiAgICAgICAgICAnYWRkX2xpc3RfZW50cnknXG4gICAgICAgICAgJ2xvYWRfZG9tYWluJ1xuICAgICAgICAgICdsb2FkX251bWJlcl9kb21haW5zJ1xuICAgICAgICAgICdsb2FkX3ZvaWNlbWFpbF9zZXR0aW5ncydcbiAgICAgICAgICAndXBkYXRlX3ZvaWNlbWFpbF9zZXR0aW5ncydcbiAgICAgICAgICAnbG9hZF9uZXdfbWVzc2FnZXMnXG4gICAgICAgICAgJ2xvYWRfc2F2ZWRfbWVzc2FnZXMnXG4gICAgICAgICAgJ3VwZGF0ZV9hdWRpb19ibG9iJ1xuICAgICAgICAgICd1cGRhdGVfcHJvdl9hdWRpb19ibG9iJ1xuICAgICAgICAgICdjcmVhdGVfZG5zX2Zvcl9kb21haW4nXG4gICAgICAgICAgJ2xvYWRfbGlzdCdcbiAgICAgICAgICAndXBkYXRlX2xpc3QnXG4gICAgICAgICAgJ3JlbW92ZV9saXN0J1xuICAgICAgICAgICdsb2FkX251bWJlcidcbiAgICAgICAgICAndXBkYXRlX251bWJlcidcbiAgICAgICAgICAncmVtb3ZlX251bWJlcidcbiAgICAgICAgICAnbG9hZF9lbmRwb2ludCdcbiAgICAgICAgICAndXBkYXRlX2VuZHBvaW50J1xuICAgICAgICAgICdyZW1vdmVfZW5kcG9pbnQnXG4gICAgICAgICAgJ2xvYWRfbnVtYmVyX2RvbWFpbidcbiAgICAgICAgICAndXBkYXRlX251bWJlcl9kb21haW4nXG4gICAgICAgICAgJ3JlbW92ZV9udW1iZXJfZG9tYWluJ1xuICAgICAgICAgICdsb2FkX2RldmljZSdcbiAgICAgICAgICAndXBkYXRlX2RldmljZSdcbiAgICAgICAgICAncmVtb3ZlX2RldmljZSdcbiAgICAgICAgICAnbW9uaXRvcl92b2ljZW1haWwnXG4gICAgICAgIF1cblxuICAgICAgICBmb3IgZXZlbnQgaW4gZXZlbnRzXG4gICAgICAgICAgZG8gKGV2ZW50KSA9PlxuICAgICAgICAgICAgZXZlbnQgPSBldmVudC5yZXBsYWNlIC8tL2csICdfJ1xuICAgICAgICAgICAgQF93cmFwX29uIGV2ZW50LCB0aGlzW2V2ZW50XVxuXG4gICAgICAgIGV2ZW50cyA9IFtcbiAgICAgICAgICAncHVzaF9jb3VjaGFwcCdcbiAgICAgICAgXVxuXG4gICAgICAgIGZvciBldmVudCBpbiBldmVudHNcbiAgICAgICAgICBkbyAoZXZlbnQpID0+XG4gICAgICAgICAgICBldmVudCA9IGV2ZW50LnJlcGxhY2UgLy0vZywgJ18nXG4gICAgICAgICAgICBAX3dyYXBfb25lIGV2ZW50LCB0aGlzW2V2ZW50XVxuXG4gICAgYXBwID0gJ3dhbmRlcmluZy1jb3VudHJ5J1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBXYW5kZXJpbmdDb3VudHJ5V2l0aFVzZXJEYXRhYmFzZVxuICAgICAgV2FuZGVyaW5nQ291bnRyeVdpdGhDQ05RXG4gICAgICBXYW5kZXJpbmdDb3VudHJ5XG4gICAgfVxuXG4gICAge3BfZnVufSA9IHJlcXVpcmUgJ2NvZmZlZXNjcmlwdC1oZWxwZXJzJ1xuXG4gICAgY291Y2hhcHAgPSAoe25vcm1hbGl6ZV9hY2NvdW50fSkgLT5cbiAgICAgIGV4dHJhID0gXCJ2YXIgbm9ybWFsaXplX2FjY291bnQgPSAje25vcm1hbGl6ZV9hY2NvdW50fTtcIlxuXG4gICAgICBfaWQ6IFwiX2Rlc2lnbi8je2FwcH1cIlxuICAgICAgbGFuZ3VhZ2U6ICdqYXZhc2NyaXB0J1xuICAgICAgdmlld3M6XG4gICAgICAgIG51bWJlcnNfYnlfZG9tYWluOlxuICAgICAgICAgIG1hcDogcF9mdW4gKGRvYykgLT5cbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgZG9jLnR5cGU/IGFuZCBkb2MudHlwZSBpcyAnbnVtYmVyJ1xuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBtID0gZG9jLl9pZC5tYXRjaCAvXm51bWJlcjpbXkBdK0AoLispJC9cbiAgICAgICAgICAgIGVtaXQgbVsxXVxuICAgICAgICAgIHJlZHVjZTogJ19jb3VudCdcblxuICAgICAgICBlbmRwb2ludHNfYnlfZG9tYWluOlxuICAgICAgICAgIG1hcDogcF9mdW4gKGRvYykgLT5cbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgZG9jLnR5cGU/IGFuZCBkb2MudHlwZSBpcyAnZW5kcG9pbnQnXG4gICAgICAgICAgICByZXR1cm4gdW5sZXNzIG0gPSBkb2MuX2lkLm1hdGNoIC9eZW5kcG9pbnQ6W15AXStAKC4rKSQvXG4gICAgICAgICAgICBlbWl0IG1bMV1cblxuICAgICAgICBkZXZpY2VzOlxuICAgICAgICAgIG1hcDogcF9mdW4gZXh0cmEsIChkb2MpIC0+XG4gICAgICAgICAgICByZXR1cm4gdW5sZXNzIGRvYy50eXBlPyBhbmQgZG9jLnR5cGUgaXMgJ2RldmljZSdcbiAgICAgICAgICAgIHJldHVybiBpZiBkb2MuZGlzYWJsZWRcblxuICAgICAgICAgICAgaWYgZG9jLmFjY291bnQ/XG4gICAgICAgICAgICAgIGFjY291bnQgPSBub3JtYWxpemVfYWNjb3VudCBkb2MuYWNjb3VudFxuICAgICAgICAgICAgICBlbWl0IFsnYWNjb3VudCcsYWNjb3VudF1cblxuICAgICAgICBudW1iZXJfZG9tYWluczpcbiAgICAgICAgICBtYXA6IHBfZnVuIGV4dHJhLCAoZG9jKSAtPlxuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBkb2MudHlwZT8gYW5kIGRvYy50eXBlIGlzICdudW1iZXJfZG9tYWluJ1xuICAgICAgICAgICAgcmV0dXJuIGlmIGRvYy5kaXNhYmxlZFxuXG4gICAgICAgICAgICBpZiBkb2MuYWNjb3VudD9cbiAgICAgICAgICAgICAgYWNjb3VudCA9IG5vcm1hbGl6ZV9hY2NvdW50IGRvYy5hY2NvdW50XG4gICAgICAgICAgICAgIGVtaXQgWydhY2NvdW50JyxhY2NvdW50XVxuXG4gICAgICAgIGVuZHBvaW50czpcbiAgICAgICAgICBtYXA6IHBfZnVuIGV4dHJhLCAoZG9jKSAtPlxuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBkb2MudHlwZT8gYW5kIGRvYy50eXBlIGlzICdlbmRwb2ludCdcbiAgICAgICAgICAgIHJldHVybiBpZiBkb2MuZGlzYWJsZWRcblxuICAgICAgICAgICAgaWYgZG9jLmFjY291bnQ/XG4gICAgICAgICAgICAgIGFjY291bnQgPSBub3JtYWxpemVfYWNjb3VudCBkb2MuYWNjb3VudFxuICAgICAgICAgICAgICBlbWl0IFsnYWNjb3VudCcsYWNjb3VudF1cblxuICAgICAgICAgICAgbSA9IGRvYy5faWQubWF0Y2ggL15lbmRwb2ludDpbXkBdK0AoLispJC9cbiAgICAgICAgICAgIGlmIG0/WzFdP1xuICAgICAgICAgICAgICBlbWl0IFsnZG9tYWluJyxtWzFdXVxuXG4gICAgICAgIGxvY2FsX251bWJlcnM6XG4gICAgICAgICAgbWFwOiBwX2Z1biBleHRyYSwgKGRvYykgLT5cbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgZG9jLnR5cGU/IGFuZCBkb2MudHlwZSBpcyAnbnVtYmVyJ1xuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBtID0gZG9jLl9pZC5tYXRjaCAvXm51bWJlcjpbXkBdK0AoLispJC9cbiAgICAgICAgICAgIHJldHVybiBpZiBkb2MuZGlzYWJsZWRcblxuICAgICAgICAgICAgaWYgZG9jLmFjY291bnQ/XG4gICAgICAgICAgICAgIGFjY291bnQgPSBub3JtYWxpemVfYWNjb3VudCBkb2MuYWNjb3VudFxuICAgICAgICAgICAgICBlbWl0IFsnYWNjb3VudCcsYWNjb3VudF1cblxuICAgICAgICAgICAgaWYgbVsxXT9cbiAgICAgICAgICAgICAgZW1pdCBbJ251bWJlcl9kb21haW4nLG1bMV1dXG5cblZpZXcgZm9yIChhZG1pbikgcm91dGluZyBvZiBnbG9iYWwgbnVtYmVycy5cblRoZSB2aWV3IGxpc3RzIGFsbCBnbG9iYWwgbnVtYmVycyBmb3IgYSBnaXZlbiBhY2NvdW50LlxuVGhlIHZpZXcgbGlzdHMgdGhlIGdsb2JhbCBudW1iZXIocykgcm91dGluZyB0byBhIGdpdmVuIGxvY2FsLW51bWJlci5cblxuICAgICAgICBnbG9iYWxfbnVtYmVyczpcbiAgICAgICAgICBtYXA6IHBfZnVuIGV4dHJhLCAoZG9jKSAtPlxuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBkb2MudHlwZT8gYW5kIGRvYy50eXBlIGlzICdudW1iZXInXG4gICAgICAgICAgICByZXR1cm4gaWYgbSA9IGRvYy5faWQubWF0Y2ggL15udW1iZXI6W15AXStAKC4rKSQvXG4gICAgICAgICAgICByZXR1cm4gaWYgZG9jLmRpc2FibGVkXG5cbiAgICAgICAgICAgIGlmIGRvYy5hY2NvdW50P1xuICAgICAgICAgICAgICBhY2NvdW50ID0gbm9ybWFsaXplX2FjY291bnQgZG9jLmFjY291bnRcbiAgICAgICAgICAgICAgZW1pdCBbJ2FjY291bnQnLGFjY291bnRdXG5cbiAgICAgICAgICAgIGlmIGRvYy5sb2NhbF9udW1iZXI/XG4gICAgICAgICAgICAgIGVtaXQgWydsb2NhbF9udW1iZXInLGRvYy5sb2NhbF9udW1iZXJdXG4iXX0=
//# sourceURL=/srv/home/stephane/Artisan/Managed/Telecoms/wandering-country/index.coffee.md