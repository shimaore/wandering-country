// Generated by CoffeeScript 1.12.4
(function() {
  var WanderingCountry, WanderingCountryBase, WanderingCountryWithCCNQ, WanderingCountryWithUserDatabase, app, assert, couchapp, create, debug, load, p_fun, seem, sleep, update,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  debug = (require('debug'))('wandering-country');

  seem = require('seem');

  sleep = require('./sleep');

  assert = function(test, msg) {
    if (!test) {
      throw new Error(msg);
    }
  };

  load = seem(function*(db, id) {
    var doc;
    debug('load', {
      id: id
    });
    return doc = (yield db.get(id)["catch"](function() {
      return {
        _id: id
      };
    }));
  });

  create = seem(function*(db, doc) {
    var rev;
    debug('create', doc);
    rev = (yield db.put(doc)["catch"](function(error) {
      debug("create: " + error + " " + error.stack);
      return Promise.reject(error);
    })).rev;
    debug('create OK', {
      rev: rev
    });
    doc._rev = rev;
    return doc;
  });

  update = seem(function*(db, data, retry) {
    var doc, k, rev, v;
    if (retry == null) {
      retry = 1;
    }
    debug('update', data);
    doc = (yield db.get(data._id)["catch"](function() {
      return data;
    }));
    debug('update: get', doc);
    for (k in data) {
      v = data[k];
      if (k[0] !== '_') {
        doc[k] = v;
      }
    }
    if (data._deleted) {
      doc._deleted = data._deleted;
    }
    debug('update: put', doc);
    rev = (yield db.put(doc)["catch"](seem(function*(error) {
      debug(error + " " + error.stack);
      if (retry > 0) {
        yield sleep(500);
        return (yield update(db, data, retry - 1));
      } else {
        return Promise.reject(error);
      }
    }))).rev;
    doc._rev = rev;
    return doc;
  });

  WanderingCountryBase = (function() {
    function WanderingCountryBase(db1) {
      this.db = db1;
    }

    WanderingCountryBase.prototype.load = function(id) {
      return load(this.db, id);
    };

    WanderingCountryBase.prototype.update = function(data) {
      return update(this.db, data);
    };

    WanderingCountryBase.prototype.create = function(data) {
      return create(this.db, data);
    };

    return WanderingCountryBase;

  })();

  WanderingCountryWithCCNQ = (function(superClass) {
    var generic_load, prefix_handlers, register;

    extend(WanderingCountryWithCCNQ, superClass);

    function WanderingCountryWithCCNQ() {
      this.create_device = bind(this.create_device, this);
      this.create_domain = bind(this.create_domain, this);
      return WanderingCountryWithCCNQ.__super__.constructor.apply(this, arguments);
    }

    WanderingCountryWithCCNQ.prototype.normalize_account = 'function(account) { return account }';

    generic_load = function(name) {
      return seem(function*(key) {
        var docs, rows;
        debug("generic_load " + name, key);
        rows = (yield this.db.query(app + "/" + name, {
          reduce: false,
          include_docs: true,
          key: key
        })["catch"](function(error) {
          debug("generic_load " + name + " Failed: " + error + " " + error.stack);
          return Promise.reject(error);
        })).rows;
        debug("generic_load " + name + " OK", key, rows);
        return docs = rows.map(function(row) {
          return row.doc;
        });
      });
    };

    WanderingCountryWithCCNQ.prototype.devices_for = generic_load('devices');

    WanderingCountryWithCCNQ.prototype.endpoints_for = generic_load('endpoints');

    WanderingCountryWithCCNQ.prototype.global_numbers_for = generic_load('global_numbers');

    WanderingCountryWithCCNQ.prototype.local_numbers_for = generic_load('local_numbers');

    WanderingCountryWithCCNQ.prototype.number_domains_for = generic_load('number_domains');

    WanderingCountryWithCCNQ.prototype.load_devices_for_account = function(account) {
      return this.devices_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_endpoints_for_account = function(account) {
      return this.endpoints_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_endpoints_for_domain = function(domain) {
      return this.endpoints_for(['domain', domain]);
    };

    WanderingCountryWithCCNQ.prototype.load_global_numbers_for_account = function(account) {
      return this.global_numbers_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_global_numbers_for_local_number = function(local_number) {
      return this.global_numbers_for(['local_number', local_number]);
    };

    WanderingCountryWithCCNQ.prototype.load_local_numbers_for_account = function(account) {
      return this.local_numbers_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_local_numbers_for_number_domain = function(number_domain) {
      return this.local_numbers_for(['number_domain', number_domain]);
    };

    WanderingCountryWithCCNQ.prototype.load_number_domains_for_account = function(account) {
      return this.number_domains_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.create_domain = function(doc) {
      doc.type = 'domain';
      return this.create(doc);
    };

    WanderingCountryWithCCNQ.prototype.create_device = function(doc) {
      doc.type = 'device';
      return this.create(doc);
    };

    WanderingCountryWithCCNQ.prototype.load_list_entries = seem(function*(number) {
      var docs, rows;
      debug('load_list_entries', number);
      rows = (yield this.db.allDocs({
        startkey: "list:" + number + "@",
        endkey: "list:" + number + "@\uffff",
        include_docs: true
      })["catch"](function(error) {
        debug("load_list_entries: " + error + " " + error.stack);
        return Promise.reject(error);
      })).rows;
      return docs = rows.map(function(row) {
        return row.doc;
      });
    });

    WanderingCountryWithCCNQ.prototype.add_list_entry = seem(function*(doc) {
      var rev;
      debug('add_list_entry', doc);
      if (!(doc.blacklist === true || doc.whitelist === true)) {
        return null;
      }
      doc._id = "list:" + doc.number + "@" + doc.calling_number;
      doc.type = 'list';
      debug('add_list_entry', doc);
      rev = (yield this.db.put(doc)["catch"](function(error) {
        debug("add_list_entry " + error + " " + error.stack);
        return Promise.reject(error);
      })).rev;
      return rev;
    });

    WanderingCountryWithCCNQ.prototype.load_domain = seem(function*(name) {
      var domain, endpoints, number_domain, numbers, result, rows;
      debug('load_domain: number-domain', name);
      number_domain = (yield this.db.get("number_domain:" + name)["catch"](function() {
        return null;
      }));
      debug('load_domain: domain', name);
      domain = (yield this.db.get("domain:" + name)["catch"](function() {
        return null;
      }));
      debug('load_domain: numbers by domain', name);
      rows = (yield this.db.query(app + "/numbers_by_domain", {
        reduce: false,
        include_docs: true,
        key: name
      })["catch"](function() {
        return {
          rows: []
        };
      })).rows;
      numbers = rows.map(function(row) {
        return row.doc;
      });
      debug('load_domain: endpoints by domain', name);
      rows = (yield this.db.query(app + "/endpoints_by_domain", {
        reduce: false,
        include_docs: true,
        key: name
      })["catch"](function() {
        return {
          rows: []
        };
      })).rows;
      endpoints = rows.map(function(row) {
        return row.doc;
      });
      if (!((number_domain != null) || (domain != null) || numbers.length > 0 || endpoints.length > 0)) {
        return new Promise.reject(new Error("No data for domain " + name));
      }
      result = {
        domain: domain,
        number_domain: number_domain,
        numbers: numbers,
        endpoints: endpoints
      };
      debug('load_domain', result);
      return result;
    });

    WanderingCountryWithCCNQ.prototype.load_number_domains = seem(function*() {
      var rows;
      debug('load_number_domains');
      rows = (yield this.db.allDocs({
        startkey: 'number_domain:',
        endkey: 'number_domain:\uffff'
      })["catch"](function(error) {
        var ref;
        debug("load_number_domains: " + ((ref = error.stack) != null ? ref : error));
        return Promise.reject(error);
      })).rows;
      debug('load_number_domains', rows);
      return rows.map(function(row) {
        var m;
        m = row.id.match(/^number_domain:(.+)$/);
        return {
          name: m[1],
          label: m[1]
        };
      });
    });

    WanderingCountryWithCCNQ.prototype.push_couchapp = function() {
      var doc;
      doc = couchapp({
        normalize_account: this.normalize_account
      });
      debug('couchapp', doc);
      return this.update(doc)["catch"](function() {
        return false;
      });
    };

    prefix_handlers = function(prefix) {
      var obj;
      return (
        obj = {},
        obj["load_" + prefix] = function(id) {
          return this.load(prefix + ":" + id, "load_" + prefix);
        },
        obj["update_" + prefix] = function(data) {
          return this.update(data, "update_" + prefix);
        },
        obj["remove_" + prefix] = function(data) {
          data._deleted = true;
          return this.update(data, "remove_" + prefix);
        },
        obj
      );
    };

    register = function(handlers) {
      var handler, name, results;
      results = [];
      for (name in handlers) {
        if (!hasProp.call(handlers, name)) continue;
        handler = handlers[name];
        results.push(WanderingCountryWithCCNQ.prototype[name] = handler);
      }
      return results;
    };

    register(prefix_handlers('list'));

    register(prefix_handlers('number'));

    register(prefix_handlers('endpoint'));

    register(prefix_handlers('number_domain'));

    register(prefix_handlers('device'));

    WanderingCountryWithCCNQ.prototype.update_prov_audio_blob = seem(function*(id, file, base, opts) {
      var a, doc, orig, ref, rev;
      debug('update_prov_audio_blob', id, base, opts);
      orig = base;
      switch (file.type) {
        case 'audio/mpeg':
          base += '.mp3';
          break;
        case 'audio/mp3':
          base += '.mp3';
          break;
        case 'audio/wav':
          base += '.wav';
          break;
        case 'audio/x-wav':
          base += '.wav';
          break;
        default:
          return Promise.reject(new Error("update_prov_audio_blob invalid_type " + file.type));
      }
      doc = (yield this.db.get(id));
      a = (ref = (yield this.db.putAttachment(doc._id, base, doc._rev, file, file.type)["catch"](function(error) {
        debug("update_prov_audio_blob " + error + " " + error.stack);
        return Promise.reject(error);
      })), rev = ref.rev, ref);
      return orig;
    });

    WanderingCountryWithCCNQ.prototype.create_dns_for_domain = seem(function*(domain) {
      var cfg, doc;
      debug('create_dns_for_domain', domain);
      cfg = (yield this.dns_for_domain(domain));
      debug('create_dns_for_domain, cfg', cfg);
      if (!((cfg.soa != null) && (cfg.admin != null) && (cfg.records != null))) {
        return Promise.reject(new Error('invalid configuration'));
      }
      doc = {
        _id: "domain:" + domain,
        domain: domain,
        type: 'domain',
        soa: cfg.soa,
        admin: cfg.admin,
        records: cfg.records
      };
      return (yield this.update(doc));
    });

    return WanderingCountryWithCCNQ;

  })(WanderingCountryBase);

  WanderingCountryWithUserDatabase = (function(superClass) {
    var load_messages, register;

    extend(WanderingCountryWithUserDatabase, superClass);

    function WanderingCountryWithUserDatabase(db, user_db1) {
      this.user_db = user_db1;
      WanderingCountryWithUserDatabase.__super__.constructor.call(this, db);
    }

    WanderingCountryWithUserDatabase.prototype.load_voicemail_settings = seem(function*(name) {
      var doc, udb;
      debug('load_voicemail_settings', {
        name: name
      });
      udb = this.user_db(name);
      doc = (yield load(udb, 'voicemail_settings'));
      udb.close();
      return doc;
    });

    WanderingCountryWithUserDatabase.prototype.update_voicemail_settings = seem(function*(name, data) {
      var doc, udb;
      debug('update_voicemail_settings', {
        name: name,
        data: data
      });
      udb = this.user_db(name);
      doc = (yield update(udb, data));
      udb.close();
      return doc;
    });

    load_messages = function(cat) {
      var obj;
      return (
        obj = {},
        obj["load_" + cat + "_messages"] = seem(function*(name) {
          var result, rows, udb;
          udb = this.user_db(name);
          rows = (yield udb.query("voicemail/" + cat + "_messages", {
            include_docs: true
          })["catch"](function() {
            return {
              rows: null
            };
          })).rows;
          result = rows != null ? rows.map(function(row) {
            return row.doc;
          }) : void 0;
          udb.close();
          return result;
        }),
        obj
      );
    };

    register = function(handlers) {
      var handler, name, results;
      results = [];
      for (name in handlers) {
        if (!hasProp.call(handlers, name)) continue;
        handler = handlers[name];
        results.push(WanderingCountryWithUserDatabase.prototype[name] = handler);
      }
      return results;
    };

    register(load_messages('new'));

    register(load_messages('saved'));

    WanderingCountryWithUserDatabase.prototype.update_audio_blob = seem(function*(name, file, base) {
      var doc, orig, rev, udb;
      debug('update_audio_blob', name, file, base);
      orig = base;
      switch (file.type) {
        case 'audio/mpeg':
          base += '.mp3';
          break;
        case 'audio/mp3':
          base += '.mp3';
          break;
        case 'audio/wav':
          base += '.wav';
          break;
        default:
          return Promise.reject(new Error(name + " invalid_type " + file.type));
      }
      udb = this.user_db(name);
      doc = (yield udb.get('voicemail_settings'));
      rev = (yield udb.putAttachment(doc._id, base, doc._rev, file, file.type)["catch"](function() {
        return {
          rev: null
        };
      })).rev;
      udb.close();
      return rev;
    });

    return WanderingCountryWithUserDatabase;

  })(WanderingCountryWithCCNQ);

  WanderingCountry = (function(superClass) {
    extend(WanderingCountry, superClass);

    WanderingCountry.prototype.start_monitoring = function(this_db) {
      var changes;
      debug('start_monitoring', this_db.name);
      changes = this_db.changes({
        live: true,
        since: 'now',
        include_docs: true
      });
      changes.on('change', (function(_this) {
        return function(change) {
          debug('monitor: change', change);
          return _this.ev.trigger('change', change.doc);
        };
      })(this));
      changes.on('error', (function(_this) {
        return function(error) {
          debug("monitor: error", this_db.name, error);
          setTimeout((function() {
            return _this.start_monitoring(this_db);
          }), 10 * 1000);
        };
      })(this));
      return changes;
    };

    WanderingCountry.prototype.monitor_voicemail = function(name) {
      var ref, ref1;
      if ((ref = this.monitor.voicemail) != null) {
        ref.cancel();
      }
      this.monitor.voicemail = null;
      if ((ref1 = this.monitor.voicemail_db) != null) {
        ref1.close();
      }
      this.monitor.voicemail_db = null;
      this.monitor.voicemail_db = this.user_db(name);
      this.monitor.voicemail = this.start_monitoring(this.monitor.voicemail_db);
    };

    function WanderingCountry(db, user_db, ev) {
      this.ev = ev;
      WanderingCountry.__super__.constructor.call(this, db, user_db);
      this.monitor = {};
      this.monitor.provisioning = this.start_monitoring(db);
      this.ev.one('shutdown', (function(_this) {
        return function() {
          var ref, ref1;
          _this.monitor.provisioning.cancel();
          _this.monitor.provisioning = null;
          _this.db.close();
          _this.db = null;
          if ((ref = _this.monitor.voicemail) != null) {
            ref.cancel();
          }
          _this.monitor.voicemail = null;
          if ((ref1 = _this.monitor.voicemail_db) != null) {
            ref1.close();
          }
          return _this.monitor.voicemail_db = null;
        };
      })(this));
    }

    WanderingCountry.prototype.trigger = function(event, data) {
      return this.ev.trigger(event, data);
    };

    WanderingCountry.prototype.on = function(event, handler) {
      return this.ev.on(event, handler);
    };

    WanderingCountry.prototype.one = function(event, handler) {
      return this.ev.one(event, handler);
    };

    WanderingCountry.prototype._handler = function(event, fun) {
      var handler;
      assert(event && fun, "Invalid " + event);
      return handler = (function(_this) {
        return function() {
          var args, error, on_reject, on_resolve;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          on_resolve = function(data) {
            debug(event + ":done", data);
            _this.trigger(event + ":done", data);
            return data;
          };
          on_reject = function(error) {
            debug(event + ":error");
            _this.trigger(event + ":error", error);
            return Promise.reject(error);
          };
          try {
            return fun.apply(_this, args).then(on_resolve, on_reject);
          } catch (error1) {
            error = error1;
            return on_reject(error);
          }
        };
      })(this);
    };

    WanderingCountry.prototype._wrap_on = function(event, fun) {
      var handler;
      handler = this._handler(event, fun);
      this.on(event, handler);
      return handler;
    };

    WanderingCountry.prototype._wrap_one = function(event, fun) {
      var handler;
      handler = this._handler(event, fun);
      this.one(event, handler);
      return handler;
    };

    WanderingCountry.prototype.install_handlers = function() {
      var event, events, fn, i, j, len, len1, results;
      events = ['load_devices_for_account', 'load_endpoints_for_account', 'load_endpoints_for_domain', 'load_global_numbers_for_account', 'load_global_numbers_for_local_number', 'load_local_numbers_for_account', 'load_local_numbers_for_number_domain', 'load_number_domains_for_account', 'create_domain', 'create_device', 'load_list_entries', 'add_list_entry', 'load_domain', 'load_number_domains', 'load_voicemail_settings', 'update_voicemail_settings', 'load_new_messages', 'load_saved_messages', 'update_audio_blob', 'update_prov_audio_blob', 'create_dns_for_domain', 'load_list', 'update_list', 'remove_list', 'load_number', 'update_number', 'remove_number', 'load_endpoint', 'update_endpoint', 'remove_endpoint', 'load_number_domain', 'update_number_domain', 'remove_number_domain', 'load_device', 'update_device', 'remove_device', 'monitor_voicemail'];
      fn = (function(_this) {
        return function(event) {
          event = event.replace(/-/g, '_');
          return _this._wrap_on(event, _this[event]);
        };
      })(this);
      for (i = 0, len = events.length; i < len; i++) {
        event = events[i];
        fn(event);
      }
      events = ['push_couchapp'];
      results = [];
      for (j = 0, len1 = events.length; j < len1; j++) {
        event = events[j];
        results.push((function(_this) {
          return function(event) {
            event = event.replace(/-/g, '_');
            return _this._wrap_one(event, _this[event]);
          };
        })(this)(event));
      }
      return results;
    };

    return WanderingCountry;

  })(WanderingCountryWithUserDatabase);

  app = 'wandering-country';

  module.exports = {
    WanderingCountryWithUserDatabase: WanderingCountryWithUserDatabase,
    WanderingCountryWithCCNQ: WanderingCountryWithCCNQ,
    WanderingCountry: WanderingCountry
  };

  p_fun = require('coffeescript-helpers').p_fun;

  couchapp = function(arg) {
    var extra, normalize_account;
    normalize_account = arg.normalize_account;
    extra = "var normalize_account = " + normalize_account + ";";
    return {
      _id: "_design/" + app,
      language: 'javascript',
      views: {
        numbers_by_domain: {
          map: p_fun(function(doc) {
            var m;
            if (!((doc.type != null) && doc.type === 'number')) {
              return;
            }
            if (!(m = doc._id.match(/^number:[^@]+@(.+)$/))) {
              return;
            }
            return emit(m[1]);
          }),
          reduce: '_count'
        },
        endpoints_by_domain: {
          map: p_fun(function(doc) {
            var m;
            if (!((doc.type != null) && doc.type === 'endpoint')) {
              return;
            }
            if (!(m = doc._id.match(/^endpoint:[^@]+@(.+)$/))) {
              return;
            }
            return emit(m[1]);
          })
        },
        devices: {
          map: p_fun(extra, function(doc) {
            var account;
            if (!((doc.type != null) && doc.type === 'device')) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              return emit(['account', account]);
            }
          })
        },
        number_domains: {
          map: p_fun(extra, function(doc) {
            var account;
            if (!((doc.type != null) && doc.type === 'number_domain')) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              return emit(['account', account]);
            }
          })
        },
        endpoints: {
          map: p_fun(extra, function(doc) {
            var account, m;
            if (!((doc.type != null) && doc.type === 'endpoint')) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              emit(['account', account]);
            }
            m = doc._id.match(/^endpoint:[^@]+@(.+)$/);
            if ((m != null ? m[1] : void 0) != null) {
              return emit(['domain', m[1]]);
            }
          })
        },
        local_numbers: {
          map: p_fun(extra, function(doc) {
            var account, m;
            if (!((doc.type != null) && doc.type === 'number')) {
              return;
            }
            if (!(m = doc._id.match(/^number:[^@]+@(.+)$/))) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              emit(['account', account]);
            }
            if (m[1] != null) {
              return emit(['number_domain', m[1]]);
            }
          })
        },
        global_numbers: {
          map: p_fun(extra, function(doc) {
            var account, m;
            if (!((doc.type != null) && doc.type === 'number')) {
              return;
            }
            if (m = doc._id.match(/^number:[^@]+@(.+)$/)) {
              return;
            }
            if (doc.disabled) {
              return;
            }
            if (doc.account != null) {
              account = normalize_account(doc.account);
              emit(['account', account]);
            }
            if (doc.local_number != null) {
              return emit(['local_number', doc.local_number]);
            }
          })
        }
      }
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC5jb2ZmZWUubWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFJO0FBQUEsTUFBQSwwS0FBQTtJQUFBOzs7OztFQUFBLEtBQUEsR0FBUSxDQUFDLE9BQUEsQ0FBUSxPQUFSLENBQUQsQ0FBQSxDQUFrQixtQkFBbEI7O0VBRVIsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSOztFQUNQLEtBQUEsR0FBUSxPQUFBLENBQVEsU0FBUjs7RUFDUixNQUFBLEdBQVMsU0FBQyxJQUFELEVBQU0sR0FBTjtJQUNQLElBQUcsQ0FBSSxJQUFQO0FBQ0UsWUFBTSxJQUFJLEtBQUosQ0FBVSxHQUFWLEVBRFI7O0VBRE87O0VBV1QsSUFBQSxHQUFPLElBQUEsQ0FBSyxVQUFDLEVBQUQsRUFBSSxFQUFKO0FBQ1YsUUFBQTtJQUFBLEtBQUEsQ0FBTSxNQUFOLEVBQWM7TUFBQyxJQUFBLEVBQUQ7S0FBZDtXQUNBLEdBQUEsR0FBTSxDQUFBLE1BQU0sRUFDVixDQUFDLEdBRFMsQ0FDTCxFQURLLENBRVYsRUFBQyxLQUFELEVBRlUsQ0FFSCxTQUFBO2FBQUc7UUFBQSxHQUFBLEVBQUssRUFBTDs7SUFBSCxDQUZHLENBQU47RUFGSSxDQUFMOztFQVFQLE1BQUEsR0FBUyxJQUFBLENBQUssVUFBQyxFQUFELEVBQUksR0FBSjtBQUNaLFFBQUE7SUFBQSxLQUFBLENBQU0sUUFBTixFQUFnQixHQUFoQjtJQUNDLE1BQU8sQ0FBQSxNQUFNLEVBQ1osQ0FBQyxHQURXLENBQ1AsR0FETyxDQUVaLEVBQUMsS0FBRCxFQUZZLENBRUwsU0FBQyxLQUFEO01BQ0wsS0FBQSxDQUFNLFVBQUEsR0FBVyxLQUFYLEdBQWlCLEdBQWpCLEdBQW9CLEtBQUssQ0FBQyxLQUFoQzthQUNBLE9BQU8sQ0FBQyxNQUFSLENBQWUsS0FBZjtJQUZLLENBRkssQ0FBTjtJQU1SLEtBQUEsQ0FBTSxXQUFOLEVBQW1CO01BQUMsS0FBQSxHQUFEO0tB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RUFGRjs7WUFJQSxJQUFHLHdCQUFIO3FCQUNFLElBQUEsQ0FBSyxDQUFDLGNBQUQsRUFBZ0IsR0FBRyxDQUFDLFlBQXBCLENBQUwsRUFERjs7VUFUZ0IsQ0FBYixDQUFMO1NBOURGO09BSEY7O0VBSFM7QUFqaUJYIiwic291cmNlc0NvbnRlbnQiOlsiICAgIGRlYnVnID0gKHJlcXVpcmUgJ2RlYnVnJykgJ3dhbmRlcmluZy1jb3VudHJ5J1xuXG4gICAgc2VlbSA9IHJlcXVpcmUgJ3NlZW0nXG4gICAgc2xlZXAgPSByZXF1aXJlICcuL3NsZWVwJ1xuICAgIGFzc2VydCA9ICh0ZXN0LG1zZykgLT5cbiAgICAgIGlmIG5vdCB0ZXN0XG4gICAgICAgIHRocm93IG5ldyBFcnJvciBtc2dcblxuR2VuZXJpYyBsb2FkL2NyZWF0ZS91cGRhdGVcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblRoZXNlIGRlZmluZSB0aGUgYmFzZSBzZW1hbnRpY3MgZm9yIHRoZSBlbnRpcmUgc3VpdGUuXG5cbiMjIyBsb2FkXG5cbiAgICBsb2FkID0gc2VlbSAoZGIsaWQpIC0+XG4gICAgICBkZWJ1ZyAnbG9hZCcsIHtpZH1cbiAgICAgIGRvYyA9IHlpZWxkIGRiXG4gICAgICAgIC5nZXQgaWRcbiAgICAgICAgLmNhdGNoIC0+IF9pZDogaWRcblxuIyMjIGNyZWF0ZVxuXG4gICAgY3JlYXRlID0gc2VlbSAoZGIsZG9jKSAtPlxuICAgICAgZGVidWcgJ2NyZWF0ZScsIGRvY1xuICAgICAge3Jldn0gPSB5aWVsZCBkYlxuICAgICAgICAucHV0IGRvY1xuICAgICAgICAuY2F0Y2ggKGVycm9yKSAtPlxuICAgICAgICAgIGRlYnVnIFwiY3JlYXRlOiAje2Vycm9yfSAje2Vycm9yLnN0YWNrfVwiXG4gICAgICAgICAgUHJvbWlzZS5yZWplY3QgZXJyb3JcblxuICAgICAgZGVidWcgJ2NyZWF0ZSBPSycsIHtyZXZ9XG4gICAgICBkb2MuX3JldiA9IHJldlxuICAgICAgZG9jXG5cbiMjIyB1cGRhdGVcblxuICAgIHVwZGF0ZSA9IHNlZW0gKGRiLGRhdGEscmV0cnkgPSAxKSAtPlxuICAgICAgZGVidWcgJ3VwZGF0ZScsIGRhdGFcbiAgICAgIGRvYyA9IHlpZWxkIGRiXG4gICAgICAgIC5nZXQgZGF0YS5faWRcbiAgICAgICAgLmNhdGNoIC0+IGRhdGFcblxuICAgICAgZGVidWcgJ3VwZGF0ZTogZ2V0JywgZG9jXG4gICAgICBmb3Igayx2IG9mIGRhdGEgd2hlbiBrWzBdIGlzbnQgJ18nXG4gICAgICAgIGRvY1trXSA9IHZcblxuICAgICAgZG9jLl9kZWxldGVkID0gZGF0YS5fZGVsZXRlZCBpZiBkYXRhLl9kZWxldGVkXG5cbiAgICAgIGRlYnVnICd1cGRhdGU6IHB1dCcsIGRvY1xuICAgICAge3Jldn0gPSB5aWVsZCBkYlxuICAgICAgICAucHV0IGRvY1xuICAgICAgICAuY2F0Y2ggc2VlbSAoZXJyb3IpIC0+XG4gICAgICAgICAgZGVidWcgXCIje2Vycm9yfSAje2Vycm9yLnN0YWNrfVwiXG4gICAgICAgICAgaWYgcmV0cnkgPiAwXG4gICAgICAgICAgICB5aWVsZCBzbGVlcCA1MDBcbiAgICAgICAgICAgIHlpZWxkIHVwZGF0ZSBkYiwgZGF0YSwgcmV0cnktMVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIFByb21pc2UucmVqZWN0IGVycm9yXG5cbiAgICAgIGRvYy5fcmV2ID0gcmV2XG4gICAgICBkb2NcblxuQmFzZSBjbGFzc1xuLS0tLS0tLS0tLVxuXG5QYXJhbWV0ZXJzOiBgZGJgIGlzIGEgUG91Y2hEQiBpbnN0YW5jZSBvZiBhIHByb3Zpc2lvbmluZyBkYXRhYmFzZS5cblxuICAgIGNsYXNzIFdhbmRlcmluZ0NvdW50cnlCYXNlXG4gICAgICBjb25zdHJ1Y3RvcjogKEBkYikgLT5cblxuICAgICAgbG9hZDogKGlkKSAtPlxuICAgICAgICBsb2FkIEBkYiwgaWRcblxuICAgICAgdXBkYXRlOiAoZGF0YSkgLT5cbiAgICAgICAgdXBkYXRlIEBkYiwgZGF0YVxuXG4gICAgICBjcmVhdGU6IChkYXRhKSAtPlxuICAgICAgICBjcmVhdGUgQGRiLCBkYXRhXG5cbkNDTlEgb3BlcmF0aW9uc1xuLS0tLS0tLS0tLS0tLS0tXG5cblRoZXNlIHJlbHkgZWl0aGVyIG9uIHRoZSBjb3VjaGFwcCwgb3IgYXJlIHN0YW5kYXJkIGRhdGFiYXNlIGFjY2Vzcy5cblxuICAgIGNsYXNzIFdhbmRlcmluZ0NvdW50cnlXaXRoQ0NOUSBleHRlbmRzIFdhbmRlcmluZ0NvdW50cnlCYXNlXG5cbkNvZmZlZS1zY3JpcHQgcmVwcmVzZW50YXRpb24gb2YgYSBtb2R1bGUgd2hpY2ggZXhwb3J0cyBhIGZ1bmN0aW9uIHRoYXQgcmV3cml0ZXMgYW4gYWNjb3VudCBpbnRvIGEgY2Fub25pY2FsIGZvcm0uXG5cbiAgICAgIG5vcm1hbGl6ZV9hY2NvdW50OiAnJydcbiAgICAgICAgZnVuY3Rpb24oYWNjb3VudCkgeyByZXR1cm4gYWNjb3VudCB9XG4gICAgICAnJydcblxuIyMjIExvYWQtdmlhLXF1ZXJ5XG5cbiAgICAgIGdlbmVyaWNfbG9hZCA9IChuYW1lKSAtPlxuICAgICAgICBzZWVtIChrZXkpIC0+XG4gICAgICAgICAgZGVidWcgXCJnZW5lcmljX2xvYWQgI3tuYW1lfVwiLCBrZXlcbiAgICAgICAgICB7cm93c30gPSB5aWVsZCBAZGJcbiAgICAgICAgICAgIC5xdWVyeSBcIiN7YXBwfS8je25hbWV9XCIsXG4gICAgICAgICAgICAgIHJlZHVjZTogZmFsc2VcbiAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiB0cnVlXG4gICAgICAgICAgICAgIGtleToga2V5XG4gICAgICAgICAgICAuY2F0Y2ggKGVycm9yKSAtPlxuICAgICAgICAgICAgICBkZWJ1ZyBcImdlbmVyaWNfbG9hZCAje25hbWV9IEZhaWxlZDogI3tlcnJvcn0gI3tlcnJvci5zdGFja31cIlxuICAgICAgICAgICAgICBQcm9taXNlLnJlamVjdCBlcnJvclxuICAgICAgICAgIGRlYnVnIFwiZ2VuZXJpY19sb2FkICN7bmFtZX0gT0tcIiwga2V5LCByb3dzXG4gICAgICAgICAgZG9jcyA9IHJvd3MubWFwIChyb3cpIC0+IHJvdy5kb2NcblxuICAgICAgZGV2aWNlc19mb3I6IGdlbmVyaWNfbG9hZCAnZGV2aWNlcydcbiAgICAgIGVuZHBvaW50c19mb3I6IGdlbmVyaWNfbG9hZCAnZW5kcG9pbnRzJ1xuICAgICAgZ2xvYmFsX251bWJlcnNfZm9yOiBnZW5lcmljX2xvYWQgJ2dsb2JhbF9udW1iZXJzJ1xuICAgICAgbG9jYWxfbnVtYmVyc19mb3I6IGdlbmVyaWNfbG9hZCAnbG9jYWxfbnVtYmVycydcbiAgICAgIG51bWJlcl9kb21haW5zX2ZvcjogZ2VuZXJpY19sb2FkICdudW1iZXJfZG9tYWlucydcblxuICAgICAgbG9hZF9kZXZpY2VzX2Zvcl9hY2NvdW50OiAoYWNjb3VudCkgLT4gQGRldmljZXNfZm9yIFsnYWNjb3VudCcsYWNjb3VudF1cbiAgICAgIGxvYWRfZW5kcG9pbnRzX2Zvcl9hY2NvdW50OiAoYWNjb3VudCkgLT4gQGVuZHBvaW50c19mb3IgWydhY2NvdW50JyxhY2NvdW50XVxuICAgICAgbG9hZF9lbmRwb2ludHNfZm9yX2RvbWFpbjogKGRvbWFpbikgLT4gQGVuZHBvaW50c19mb3IgWydkb21haW4nLGRvbWFpbl1cbiAgICAgIGxvYWRfZ2xvYmFsX251bWJlcnNfZm9yX2FjY291bnQ6IChhY2NvdW50KSAtPiBAZ2xvYmFsX251bWJlcnNfZm9yIFsnYWNjb3VudCcsYWNjb3VudF1cbiAgICAgIGxvYWRfZ2xvYmFsX251bWJlcnNfZm9yX2xvY2FsX251bWJlcjogKGxvY2FsX251bWJlcikgLT4gQGdsb2JhbF9udW1iZXJzX2ZvciBbJ2xvY2FsX251bWJlcicsbG9jYWxfbnVtYmVyXVxuICAgICAgbG9hZF9sb2NhbF9udW1iZXJzX2Zvcl9hY2NvdW50OiAoYWNjb3VudCkgLT4gQGxvY2FsX251bWJlcnNfZm9yIFsnYWNjb3VudCcsYWNjb3VudF1cbiAgICAgIGxvYWRfbG9jYWxfbnVtYmVyc19mb3JfbnVtYmVyX2RvbWFpbjogKG51bWJlcl9kb21haW4pIC0+IEBsb2NhbF9udW1iZXJzX2ZvciBbJ251bWJlcl9kb21haW4nLG51bWJlcl9kb21haW5dXG4gICAgICBsb2FkX251bWJlcl9kb21haW5zX2Zvcl9hY2NvdW50OiAoYWNjb3VudCkgLT4gQG51bWJlcl9kb21haW5zX2ZvciBbJ2FjY291bnQnLGFjY291bnRdXG5cbiMjIyBDcmVhdGVcblxuICAgICAgY3JlYXRlX2RvbWFpbjogKGRvYykgPT5cbiAgICAgICAgZG9jLnR5cGUgPSAnZG9tYWluJ1xuICAgICAgICBAY3JlYXRlIGRvY1xuXG4gICAgICBjcmVhdGVfZGV2aWNlOiAoZG9jKSA9PlxuICAgICAgICBkb2MudHlwZSA9ICdkZXZpY2UnXG4gICAgICAgIEBjcmVhdGUgZG9jXG5cbiMjIyBCdWlsZCBsaXN0IG9mIGBsaXN0OmAgaXRlbXMgZm9yIGEgZ2l2ZW4gbnVtYmVyXG5cbiAgICAgIGxvYWRfbGlzdF9lbnRyaWVzOiBzZWVtIChudW1iZXIpIC0+XG4gICAgICAgIGRlYnVnICdsb2FkX2xpc3RfZW50cmllcycsIG51bWJlclxuICAgICAgICB7cm93c30gPSB5aWVsZCBAZGJcbiAgICAgICAgICAuYWxsRG9jc1xuICAgICAgICAgICAgc3RhcnRrZXk6IFwibGlzdDoje251bWJlcn1AXCJcbiAgICAgICAgICAgIGVuZGtleTogXCJsaXN0OiN7bnVtYmVyfUBcXHVmZmZmXCJcbiAgICAgICAgICAgIGluY2x1ZGVfZG9jczp0cnVlXG4gICAgICAgICAgLmNhdGNoIChlcnJvcikgLT5cbiAgICAgICAgICAgIGRlYnVnIFwibG9hZF9saXN0X2VudHJpZXM6ICN7ZXJyb3J9ICN7ZXJyb3Iuc3RhY2t9XCJcbiAgICAgICAgICAgIFByb21pc2UucmVqZWN0IGVycm9yXG4gICAgICAgIGRvY3MgPSByb3dzLm1hcCAocm93KSAtPiByb3cuZG9jXG5cbiMjIyBBZGQgYSBuZXcgYGxpc3Q6YCBpdGVtXG5cbiAgICAgIGFkZF9saXN0X2VudHJ5OiBzZWVtIChkb2MpIC0+XG4gICAgICAgIGRlYnVnICdhZGRfbGlzdF9lbnRyeScsIGRvY1xuICAgICAgICB1bmxlc3MgZG9jLmJsYWNrbGlzdCBpcyB0cnVlIG9yIGRvYy53aGl0ZWxpc3QgaXMgdHJ1ZVxuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIGRvYy5faWQgPSBcImxpc3Q6I3tkb2MubnVtYmVyfUAje2RvYy5jYWxsaW5nX251bWJlcn1cIlxuICAgICAgICBkb2MudHlwZSA9ICdsaXN0J1xuICAgICAgICBkZWJ1ZyAnYWRkX2xpc3RfZW50cnknLCBkb2NcbiAgICAgICAge3Jldn0gPSB5aWVsZCBAZGJcbiAgICAgICAgICAucHV0IGRvY1xuICAgICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgICBkZWJ1ZyBcImFkZF9saXN0X2VudHJ5ICN7ZXJyb3J9ICN7ZXJyb3Iuc3RhY2t9XCJcbiAgICAgICAgICAgIFByb21pc2UucmVqZWN0IGVycm9yXG4gICAgICAgIHJldlxuXG4jIyMgTG9hZCBhIHNpbmdsZSBudW1iZXIgZG9tYWluXG5cbiAgICAgIGxvYWRfZG9tYWluOiBzZWVtIChuYW1lKSAtPlxuXG5Mb2FkIHRoZSBudW1iZXItZG9tYWluXG5cbiAgICAgICAgZGVidWcgJ2xvYWRfZG9tYWluOiBudW1iZXItZG9tYWluJywgbmFtZVxuXG4gICAgICAgIG51bWJlcl9kb21haW4gPSB5aWVsZCBAZGJcbiAgICAgICAgICAuZ2V0IFwibnVtYmVyX2RvbWFpbjoje25hbWV9XCJcbiAgICAgICAgICAuY2F0Y2ggLT4gbnVsbFxuXG5Mb2FkIHRoZSBhc3NvY2lhdGVkIEROUyBkb21haW5cblxuICAgICAgICBkZWJ1ZyAnbG9hZF9kb21haW46IGRvbWFpbicsIG5hbWVcblxuICAgICAgICBkb21haW4gPSB5aWVsZCBAZGJcbiAgICAgICAgICAuZ2V0IFwiZG9tYWluOiN7bmFtZX1cIlxuICAgICAgICAgIC5jYXRjaCAtPiBudWxsXG5cbkxvYWQgdGhlIG51bWJlcnMgaW4gdGhlIGRvbWFpbiAoaW5jbHVkaW5nIHRoZSBkaXNhYmxlZCBvbmVzKVxuXG4gICAgICAgIGRlYnVnICdsb2FkX2RvbWFpbjogbnVtYmVycyBieSBkb21haW4nLCBuYW1lXG5cbiAgICAgICAge3Jvd3N9ID0geWllbGQgQGRiXG4gICAgICAgICAgLnF1ZXJ5IFwiI3thcHB9L251bWJlcnNfYnlfZG9tYWluXCIsXG4gICAgICAgICAgICByZWR1Y2U6IGZhbHNlXG4gICAgICAgICAgICBpbmNsdWRlX2RvY3M6IHRydWVcbiAgICAgICAgICAgIGtleTogbmFtZVxuICAgICAgICAgIC5jYXRjaCAtPiByb3dzOltdXG5cbiAgICAgICAgbnVtYmVycyA9IHJvd3MubWFwIChyb3cpIC0+IHJvdy5kb2NcblxuTG9hZCB0aGUgZW5kcG9pbnRzIGluIHRoZSBkb21haW4gKGluY2x1ZGluZyB0aGUgZGlzYWJsZWQgb25lcylcblxuICAgICAgICBkZWJ1ZyAnbG9hZF9kb21haW46IGVuZHBvaW50cyBieSBkb21haW4nLCBuYW1lXG5cbiAgICAgICAge3Jvd3N9ID0geWllbGQgQGRiXG4gICAgICAgICAgLnF1ZXJ5IFwiI3thcHB9L2VuZHBvaW50c19ieV9kb21haW5cIixcbiAgICAgICAgICAgIHJlZHVjZTogZmFsc2VcbiAgICAgICAgICAgIGluY2x1ZGVfZG9jczogdHJ1ZVxuICAgICAgICAgICAga2V5OiBuYW1lXG4gICAgICAgICAgLmNhdGNoIC0+IHJvd3M6W11cblxuICAgICAgICBlbmRwb2ludHMgPSByb3dzLm1hcCAocm93KSAtPiByb3cuZG9jXG5cblRyaWdnZXIgZXJyb3JzXG5cbiAgICAgICAgdW5sZXNzIG51bWJlcl9kb21haW4/IG9yIGRvbWFpbj8gb3IgbnVtYmVycy5sZW5ndGggPiAwIG9yIGVuZHBvaW50cy5sZW5ndGggPiAwXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlLnJlamVjdCBuZXcgRXJyb3IgXCJObyBkYXRhIGZvciBkb21haW4gI3tuYW1lfVwiXG5cblNlbmQgdGhlIHJlc3VsdFxuXG4gICAgICAgIHJlc3VsdCA9IHtkb21haW4sbnVtYmVyX2RvbWFpbixudW1iZXJzLGVuZHBvaW50c31cbiAgICAgICAgZGVidWcgJ2xvYWRfZG9tYWluJywgcmVzdWx0XG4gICAgICAgIHJlc3VsdFxuXG4jIyMgQnVpbGQgbnVtYmVyIGRvbWFpbnMgbGlzdFxuXG4gICAgICBsb2FkX251bWJlcl9kb21haW5zOiBzZWVtIC0+XG4gICAgICAgIGRlYnVnICdsb2FkX251bWJlcl9kb21haW5zJ1xuXG4gICAgICAgIHtyb3dzfSA9IHlpZWxkIEBkYlxuICAgICAgICAgIC5hbGxEb2NzXG4gICAgICAgICAgICBzdGFydGtleTogJ251bWJlcl9kb21haW46J1xuICAgICAgICAgICAgZW5ka2V5OiAnbnVtYmVyX2RvbWFpbjpcXHVmZmZmJ1xuICAgICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgICBkZWJ1ZyBcImxvYWRfbnVtYmVyX2RvbWFpbnM6ICN7ZXJyb3Iuc3RhY2sgPyBlcnJvcn1cIlxuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QgZXJyb3JcblxuICAgICAgICBkZWJ1ZyAnbG9hZF9udW1iZXJfZG9tYWlucycsIHJvd3NcblxuICAgICAgICByb3dzLm1hcCAocm93KSAtPlxuICAgICAgICAgIG0gPSByb3cuaWQubWF0Y2ggL15udW1iZXJfZG9tYWluOiguKykkL1xuICAgICAgICAgIG5hbWU6IG1bMV0sIGxhYmVsOiBtWzFdXG5cbiMjIyBJbnN0YWxsIHRoZSBDb3VjaCBBcHAgb24gdGhlIHNlcnZlclxuXG4gICAgICBwdXNoX2NvdWNoYXBwOiAtPlxuICAgICAgICBkb2MgPSBjb3VjaGFwcCB7QG5vcm1hbGl6ZV9hY2NvdW50fVxuICAgICAgICBkZWJ1ZyAnY291Y2hhcHAnLCBkb2NcbiAgICAgICAgQHVwZGF0ZSBkb2NcbiAgICAgICAgLmNhdGNoIC0+IGZhbHNlXG5cbiMjIyBCdWlsZCBnZW5lcmljIGxvYWQvdXBkYXRlL3JlbW92ZSBmb3IgdmFyaW91cyB0eXBlc1xuXG4gICAgICBwcmVmaXhfaGFuZGxlcnMgPSAocHJlZml4KSAtPlxuXG4gICAgICAgIFwibG9hZF8je3ByZWZpeH1cIjogKGlkKSAtPlxuICAgICAgICAgIEBsb2FkIFwiI3twcmVmaXh9OiN7aWR9XCIsIFwibG9hZF8je3ByZWZpeH1cIlxuXG4gICAgICAgIFwidXBkYXRlXyN7cHJlZml4fVwiOiAoZGF0YSkgLT5cbiAgICAgICAgICBAdXBkYXRlIGRhdGEsIFwidXBkYXRlXyN7cHJlZml4fVwiXG5cbiAgICAgICAgXCJyZW1vdmVfI3twcmVmaXh9XCI6IChkYXRhKSAtPlxuICAgICAgICAgIGRhdGEuX2RlbGV0ZWQgPSB0cnVlXG4gICAgICAgICAgQHVwZGF0ZSBkYXRhLCBcInJlbW92ZV8je3ByZWZpeH1cIlxuXG4gICAgICByZWdpc3RlciA9IChoYW5kbGVycykgPT5cbiAgICAgICAgZm9yIG93biBuYW1lLCBoYW5kbGVyIG9mIGhhbmRsZXJzXG4gICAgICAgICAgdGhpczo6W25hbWVdID0gaGFuZGxlclxuXG4gICAgICByZWdpc3RlciBwcmVmaXhfaGFuZGxlcnMgJ2xpc3QnXG4gICAgICByZWdpc3RlciBwcmVmaXhfaGFuZGxlcnMgJ251bWJlcidcbiAgICAgIHJlZ2lzdGVyIHByZWZpeF9oYW5kbGVycyAnZW5kcG9pbnQnXG4gICAgICByZWdpc3RlciBwcmVmaXhfaGFuZGxlcnMgJ251bWJlcl9kb21haW4nXG4gICAgICByZWdpc3RlciBwcmVmaXhfaGFuZGxlcnMgJ2RldmljZSdcblxuIyMjIFNhdmUgYXVkaW8vbXVzaWNcblxuICAgICAgdXBkYXRlX3Byb3ZfYXVkaW9fYmxvYjogc2VlbSAoaWQsIGZpbGUsIGJhc2UsIG9wdHMpIC0+XG4gICAgICAgIGRlYnVnICd1cGRhdGVfcHJvdl9hdWRpb19ibG9iJywgaWQsIGJhc2UsIG9wdHNcbiAgICAgICAgb3JpZyA9IGJhc2VcbiAgICAgICAgc3dpdGNoIGZpbGUudHlwZVxuICAgICAgICAgIHdoZW4gJ2F1ZGlvL21wZWcnXG4gICAgICAgICAgICBiYXNlICs9ICcubXAzJ1xuICAgICAgICAgIHdoZW4gJ2F1ZGlvL21wMydcbiAgICAgICAgICAgIGJhc2UgKz0gJy5tcDMnXG4gICAgICAgICAgd2hlbiAnYXVkaW8vd2F2J1xuICAgICAgICAgICAgYmFzZSArPSAnLndhdidcbiAgICAgICAgICB3aGVuICdhdWRpby94LXdhdidcbiAgICAgICAgICAgIGJhc2UgKz0gJy53YXYnXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0IG5ldyBFcnJvciBcInVwZGF0ZV9wcm92X2F1ZGlvX2Jsb2IgaW52YWxpZF90eXBlICN7ZmlsZS50eXBlfVwiXG5cbiAgICAgICAgZG9jID0geWllbGQgQGRiLmdldCBpZFxuICAgICAgICBhID0ge3Jldn0gPSB5aWVsZCBAZGJcbiAgICAgICAgICAucHV0QXR0YWNobWVudCBkb2MuX2lkLCBiYXNlLCBkb2MuX3JldiwgZmlsZSwgZmlsZS50eXBlXG4gICAgICAgICAgLmNhdGNoIChlcnJvcikgLT5cbiAgICAgICAgICAgIGRlYnVnIFwidXBkYXRlX3Byb3ZfYXVkaW9fYmxvYiAje2Vycm9yfSAje2Vycm9yLnN0YWNrfVwiXG4gICAgICAgICAgICBQcm9taXNlLnJlamVjdCBlcnJvclxuICAgICAgICBvcmlnXG5cbiMjIyBETlMgUmVjb3Jkc1xuXG4gICAgICBjcmVhdGVfZG5zX2Zvcl9kb21haW46IHNlZW0gKGRvbWFpbikgLT5cbiAgICAgICAgZGVidWcgJ2NyZWF0ZV9kbnNfZm9yX2RvbWFpbicsIGRvbWFpblxuICAgICAgICBjZmcgPSB5aWVsZCBAZG5zX2Zvcl9kb21haW4gZG9tYWluXG4gICAgICAgIGRlYnVnICdjcmVhdGVfZG5zX2Zvcl9kb21haW4sIGNmZycsIGNmZ1xuXG4gICAgICAgIHVubGVzcyBjZmcuc29hPyBhbmQgY2ZnLmFkbWluPyBhbmQgY2ZnLnJlY29yZHM/XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0IG5ldyBFcnJvciAnaW52YWxpZCBjb25maWd1cmF0aW9uJ1xuXG4gICAgICAgIGRvYyA9XG4gICAgICAgICAgX2lkOiBcImRvbWFpbjoje2RvbWFpbn1cIlxuICAgICAgICAgIGRvbWFpbjogZG9tYWluXG4gICAgICAgICAgdHlwZTogJ2RvbWFpbidcbiAgICAgICAgICBzb2E6IGNmZy5zb2FcbiAgICAgICAgICBhZG1pbjogY2ZnLmFkbWluXG4gICAgICAgICAgcmVjb3JkczogY2ZnLnJlY29yZHNcblxuICAgICAgICB5aWVsZCBAdXBkYXRlIGRvY1xuXG5FeHRlbmQgd2l0aCBVc2VyLURhdGFiYXNlc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuUGFyYW1ldGVyczogYHVzZXJfZGJgIGNvbnZlcnRzIGEgdXNlciBkYXRhYmFzZSBuYW1lIGludG8gYSBQb3VjaERCIG9iamVjdC5cblxuICAgIGNsYXNzIFdhbmRlcmluZ0NvdW50cnlXaXRoVXNlckRhdGFiYXNlIGV4dGVuZHMgV2FuZGVyaW5nQ291bnRyeVdpdGhDQ05RXG5cbiAgICAgIGNvbnN0cnVjdG9yOiAoZGIsQHVzZXJfZGIpIC0+XG4gICAgICAgIHN1cGVyIGRiXG5cbiMjIyBMb2FkL3VwZGF0ZSBhIHVzZXIgZGF0YWJhc2UncyB2b2ljZW1haWwtc2V0dGluZ3NcblxuICAgICAgbG9hZF92b2ljZW1haWxfc2V0dGluZ3M6IHNlZW0gKG5hbWUpIC0+XG4gICAgICAgIGRlYnVnICdsb2FkX3ZvaWNlbWFpbF9zZXR0aW5ncycsIHtuYW1lfVxuICAgICAgICB1ZGIgPSBAdXNlcl9kYiBuYW1lXG4gICAgICAgIGRvYyA9IHlpZWxkIGxvYWQgdWRiLCAndm9pY2VtYWlsX3NldHRpbmdzJ1xuICAgICAgICB1ZGIuY2xvc2UoKVxuICAgICAgICBkb2NcblxuICAgICAgdXBkYXRlX3ZvaWNlbWFpbF9zZXR0aW5nczogc2VlbSAobmFtZSxkYXRhKSAtPlxuICAgICAgICBkZWJ1ZyAndXBkYXRlX3ZvaWNlbWFpbF9zZXR0aW5ncycsIHtuYW1lLGRhdGF9XG4gICAgICAgIHVkYiA9IEB1c2VyX2RiIG5hbWVcbiAgICAgICAgZG9jID0geWllbGQgdXBkYXRlIHVkYiwgZGF0YVxuICAgICAgICB1ZGIuY2xvc2UoKVxuICAgICAgICBkb2NcblxuIyMjIExvYWQgYSB1c2VyJ3MgbWVzc2FnZXNcblxuICAgICAgbG9hZF9tZXNzYWdlcyA9IChjYXQpIC0+XG4gICAgICAgIFwibG9hZF8je2NhdH1fbWVzc2FnZXNcIjogc2VlbSAobmFtZSkgLT5cbiAgICAgICAgICB1ZGIgPSBAdXNlcl9kYiBuYW1lXG4gICAgICAgICAge3Jvd3N9ID0geWllbGQgdWRiXG4gICAgICAgICAgICAucXVlcnkgXCJ2b2ljZW1haWwvI3tjYXR9X21lc3NhZ2VzXCIsXG4gICAgICAgICAgICAgIGluY2x1ZGVfZG9jczogdHJ1ZVxuICAgICAgICAgICAgLmNhdGNoIC0+IHJvd3M6bnVsbFxuICAgICAgICAgIHJlc3VsdCA9IHJvd3M/Lm1hcCAocm93KSAtPiByb3cuZG9jXG4gICAgICAgICAgdWRiLmNsb3NlKClcbiAgICAgICAgICByZXN1bHRcblxuICAgICAgcmVnaXN0ZXIgPSAoaGFuZGxlcnMpID0+XG4gICAgICAgIGZvciBvd24gbmFtZSwgaGFuZGxlciBvZiBoYW5kbGVyc1xuICAgICAgICAgIHRoaXM6OltuYW1lXSA9IGhhbmRsZXJcblxuICAgICAgcmVnaXN0ZXIgbG9hZF9tZXNzYWdlcyAnbmV3J1xuICAgICAgcmVnaXN0ZXIgbG9hZF9tZXNzYWdlcyAnc2F2ZWQnXG5cbiMjIyBTYXZlIG11c2ljXG5cbiAgICAgIHVwZGF0ZV9hdWRpb19ibG9iOiBzZWVtIChuYW1lLCBmaWxlLCBiYXNlKSAtPlxuICAgICAgICBkZWJ1ZyAndXBkYXRlX2F1ZGlvX2Jsb2InLCBuYW1lLCBmaWxlLCBiYXNlXG4gICAgICAgIG9yaWcgPSBiYXNlXG4gICAgICAgIHN3aXRjaCBmaWxlLnR5cGVcbiAgICAgICAgICB3aGVuICdhdWRpby9tcGVnJ1xuICAgICAgICAgICAgYmFzZSArPSAnLm1wMydcbiAgICAgICAgICB3aGVuICdhdWRpby9tcDMnXG4gICAgICAgICAgICBiYXNlICs9ICcubXAzJ1xuICAgICAgICAgIHdoZW4gJ2F1ZGlvL3dhdidcbiAgICAgICAgICAgIGJhc2UgKz0gJy53YXYnXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0IG5ldyBFcnJvciBcIiN7bmFtZX0gaW52YWxpZF90eXBlICN7ZmlsZS50eXBlfVwiXG5cbiAgICAgICAgdWRiID0gQHVzZXJfZGIgbmFtZVxuICAgICAgICBkb2MgPSB5aWVsZCB1ZGIuZ2V0ICd2b2ljZW1haWxfc2V0dGluZ3MnXG4gICAgICAgIHtyZXZ9ID0geWllbGQgdWRiXG4gICAgICAgICAgLnB1dEF0dGFjaG1lbnQgZG9jLl9pZCwgYmFzZSwgZG9jLl9yZXYsIGZpbGUsIGZpbGUudHlwZVxuICAgICAgICAgIC5jYXRjaCAtPiByZXY6bnVsbFxuXG4gICAgICAgIHVkYi5jbG9zZSgpXG4gICAgICAgIHJldlxuXG5XcmFwIHdpdGggZXZlbnRzXG4tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBjbGFzcyBXYW5kZXJpbmdDb3VudHJ5IGV4dGVuZHMgV2FuZGVyaW5nQ291bnRyeVdpdGhVc2VyRGF0YWJhc2VcblxuIyMjIEV4dGVuZCB3aXRoIG1vbml0b3JpbmdcblxuICAgICAgc3RhcnRfbW9uaXRvcmluZzogKHRoaXNfZGIpIC0+XG4gICAgICAgIGRlYnVnICdzdGFydF9tb25pdG9yaW5nJywgdGhpc19kYi5uYW1lXG4gICAgICAgIGNoYW5nZXMgPSB0aGlzX2RiLmNoYW5nZXNcbiAgICAgICAgICBsaXZlOiB0cnVlXG4gICAgICAgICAgc2luY2U6ICdub3cnXG4gICAgICAgICAgaW5jbHVkZV9kb2NzOiB0cnVlXG5cbiAgICAgICAgY2hhbmdlcy5vbiAnY2hhbmdlJywgKGNoYW5nZSkgPT5cbiAgICAgICAgICBkZWJ1ZyAnbW9uaXRvcjogY2hhbmdlJywgY2hhbmdlXG4gICAgICAgICAgQGV2LnRyaWdnZXIgJ2NoYW5nZScsIGNoYW5nZS5kb2NcblxuICAgICAgICBjaGFuZ2VzLm9uICdlcnJvcicsIChlcnJvcikgPT5cbiAgICAgICAgICBkZWJ1ZyBcIm1vbml0b3I6IGVycm9yXCIsIHRoaXNfZGIubmFtZSwgZXJyb3JcbiAgICAgICAgICBzZXRUaW1lb3V0ICg9PiBAc3RhcnRfbW9uaXRvcmluZyB0aGlzX2RiKSwgMTAqMTAwMFxuICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIGNoYW5nZXNcblxuICAgICAgbW9uaXRvcl92b2ljZW1haWw6IChuYW1lKSAtPlxuICAgICAgICBAbW9uaXRvci52b2ljZW1haWw/LmNhbmNlbCgpXG4gICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbCA9IG51bGxcbiAgICAgICAgQG1vbml0b3Iudm9pY2VtYWlsX2RiPy5jbG9zZSgpXG4gICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbF9kYiA9IG51bGxcblxuICAgICAgICBAbW9uaXRvci52b2ljZW1haWxfZGIgPSBAdXNlcl9kYiBuYW1lXG4gICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbCA9IEBzdGFydF9tb25pdG9yaW5nIEBtb25pdG9yLnZvaWNlbWFpbF9kYlxuXG4gICAgICAgIHJldHVyblxuXG4gICAgICBjb25zdHJ1Y3RvcjogKGRiLHVzZXJfZGIsQGV2KSAtPlxuICAgICAgICBzdXBlciBkYiwgdXNlcl9kYlxuXG4gICAgICAgIEBtb25pdG9yID0ge31cblxuICAgICAgICBAbW9uaXRvci5wcm92aXNpb25pbmcgPSBAc3RhcnRfbW9uaXRvcmluZyBkYlxuXG4gICAgICAgIEBldi5vbmUgJ3NodXRkb3duJywgPT5cbiAgICAgICAgICBAbW9uaXRvci5wcm92aXNpb25pbmcuY2FuY2VsKClcbiAgICAgICAgICBAbW9uaXRvci5wcm92aXNpb25pbmcgPSBudWxsXG4gICAgICAgICAgQGRiLmNsb3NlKClcbiAgICAgICAgICBAZGIgPSBudWxsXG5cbiAgICAgICAgICBAbW9uaXRvci52b2ljZW1haWw/LmNhbmNlbCgpXG4gICAgICAgICAgQG1vbml0b3Iudm9pY2VtYWlsID0gbnVsbFxuICAgICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbF9kYj8uY2xvc2UoKVxuICAgICAgICAgIEBtb25pdG9yLnZvaWNlbWFpbF9kYiA9IG51bGxcblxuIyMjIEV2ZW50c1xuXG4gICAgICB0cmlnZ2VyOiAoZXZlbnQsZGF0YSkgLT5cbiAgICAgICAgQGV2LnRyaWdnZXIgZXZlbnQsIGRhdGFcblxuICAgICAgb246IChldmVudCxoYW5kbGVyKSAtPlxuICAgICAgICBAZXYub24gZXZlbnQsIGhhbmRsZXJcblxuICAgICAgb25lOiAoZXZlbnQsaGFuZGxlcikgLT5cbiAgICAgICAgQGV2Lm9uZSBldmVudCwgaGFuZGxlclxuXG4gICAgICBfaGFuZGxlcjogKGV2ZW50LGZ1bikgLT5cbiAgICAgICAgYXNzZXJ0IChldmVudCBhbmQgZnVuKSwgXCJJbnZhbGlkICN7ZXZlbnR9XCJcbiAgICAgICAgaGFuZGxlciA9IChhcmdzLi4uKSA9PlxuICAgICAgICAgIG9uX3Jlc29sdmUgPSAoZGF0YSkgPT5cbiAgICAgICAgICAgIGRlYnVnIFwiI3tldmVudH06ZG9uZVwiLCBkYXRhXG4gICAgICAgICAgICBAdHJpZ2dlciBcIiN7ZXZlbnR9OmRvbmVcIiwgZGF0YVxuICAgICAgICAgICAgZGF0YVxuICAgICAgICAgIG9uX3JlamVjdCA9IChlcnJvcikgPT5cbiAgICAgICAgICAgIGRlYnVnIFwiI3tldmVudH06ZXJyb3JcIlxuICAgICAgICAgICAgQHRyaWdnZXIgXCIje2V2ZW50fTplcnJvclwiLCBlcnJvclxuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QgZXJyb3JcbiAgICAgICAgICB0cnlcbiAgICAgICAgICAgIGZ1blxuICAgICAgICAgICAgICAuYXBwbHkgdGhpcywgYXJnc1xuICAgICAgICAgICAgICAudGhlbiBvbl9yZXNvbHZlLCBvbl9yZWplY3RcbiAgICAgICAgICBjYXRjaCBlcnJvclxuICAgICAgICAgICAgb25fcmVqZWN0IGVycm9yXG5cbiAgICAgIF93cmFwX29uOiAoZXZlbnQsZnVuKSAtPlxuICAgICAgICBoYW5kbGVyID0gQF9oYW5kbGVyIGV2ZW50LCBmdW5cbiAgICAgICAgQG9uIGV2ZW50LCBoYW5kbGVyXG4gICAgICAgIGhhbmRsZXJcblxuICAgICAgX3dyYXBfb25lOiAoZXZlbnQsZnVuKSAtPlxuICAgICAgICBoYW5kbGVyID0gQF9oYW5kbGVyIGV2ZW50LCBmdW5cbiAgICAgICAgQG9uZSBldmVudCwgaGFuZGxlclxuICAgICAgICBoYW5kbGVyXG5cbiAgICAgIGluc3RhbGxfaGFuZGxlcnM6IC0+XG4gICAgICAgIGV2ZW50cyA9IFtcbiAgICAgICAgICAnbG9hZF9kZXZpY2VzX2Zvcl9hY2NvdW50J1xuICAgICAgICAgICdsb2FkX2VuZHBvaW50c19mb3JfYWNjb3VudCdcbiAgICAgICAgICAnbG9hZF9lbmRwb2ludHNfZm9yX2RvbWFpbidcbiAgICAgICAgICAnbG9hZF9nbG9iYWxfbnVtYmVyc19mb3JfYWNjb3VudCdcbiAgICAgICAgICAnbG9hZF9nbG9iYWxfbnVtYmVyc19mb3JfbG9jYWxfbnVtYmVyJ1xuICAgICAgICAgICdsb2FkX2xvY2FsX251bWJlcnNfZm9yX2FjY291bnQnXG4gICAgICAgICAgJ2xvYWRfbG9jYWxfbnVtYmVyc19mb3JfbnVtYmVyX2RvbWFpbidcbiAgICAgICAgICAnbG9hZF9udW1iZXJfZG9tYWluc19mb3JfYWNjb3VudCdcbiAgICAgICAgICAnY3JlYXRlX2RvbWFpbidcbiAgICAgICAgICAnY3JlYXRlX2RldmljZSdcbiAgICAgICAgICAnbG9hZF9saXN0X2VudHJpZXMnXG4gICAgICAgICAgJ2FkZF9saXN0X2VudHJ5J1xuICAgICAgICAgICdsb2FkX2RvbWFpbidcbiAgICAgICAgICAnbG9hZF9udW1iZXJfZG9tYWlucydcbiAgICAgICAgICAnbG9hZF92b2ljZW1haWxfc2V0dGluZ3MnXG4gICAgICAgICAgJ3VwZGF0ZV92b2ljZW1haWxfc2V0dGluZ3MnXG4gICAgICAgICAgJ2xvYWRfbmV3X21lc3NhZ2VzJ1xuICAgICAgICAgICdsb2FkX3NhdmVkX21lc3NhZ2VzJ1xuICAgICAgICAgICd1cGRhdGVfYXVkaW9fYmxvYidcbiAgICAgICAgICAndXBkYXRlX3Byb3ZfYXVkaW9fYmxvYidcbiAgICAgICAgICAnY3JlYXRlX2Ruc19mb3JfZG9tYWluJ1xuICAgICAgICAgICdsb2FkX2xpc3QnXG4gICAgICAgICAgJ3VwZGF0ZV9saXN0J1xuICAgICAgICAgICdyZW1vdmVfbGlzdCdcbiAgICAgICAgICAnbG9hZF9udW1iZXInXG4gICAgICAgICAgJ3VwZGF0ZV9udW1iZXInXG4gICAgICAgICAgJ3JlbW92ZV9udW1iZXInXG4gICAgICAgICAgJ2xvYWRfZW5kcG9pbnQnXG4gICAgICAgICAgJ3VwZGF0ZV9lbmRwb2ludCdcbiAgICAgICAgICAncmVtb3ZlX2VuZHBvaW50J1xuICAgICAgICAgICdsb2FkX251bWJlcl9kb21haW4nXG4gICAgICAgICAgJ3VwZGF0ZV9udW1iZXJfZG9tYWluJ1xuICAgICAgICAgICdyZW1vdmVfbnVtYmVyX2RvbWFpbidcbiAgICAgICAgICAnbG9hZF9kZXZpY2UnXG4gICAgICAgICAgJ3VwZGF0ZV9kZXZpY2UnXG4gICAgICAgICAgJ3JlbW92ZV9kZXZpY2UnXG4gICAgICAgICAgJ21vbml0b3Jfdm9pY2VtYWlsJ1xuICAgICAgICBdXG5cbiAgICAgICAgZm9yIGV2ZW50IGluIGV2ZW50c1xuICAgICAgICAgIGRvIChldmVudCkgPT5cbiAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQucmVwbGFjZSAvLS9nLCAnXydcbiAgICAgICAgICAgIEBfd3JhcF9vbiBldmVudCwgdGhpc1tldmVudF1cblxuICAgICAgICBldmVudHMgPSBbXG4gICAgICAgICAgJ3B1c2hfY291Y2hhcHAnXG4gICAgICAgIF1cblxuICAgICAgICBmb3IgZXZlbnQgaW4gZXZlbnRzXG4gICAgICAgICAgZG8gKGV2ZW50KSA9PlxuICAgICAgICAgICAgZXZlbnQgPSBldmVudC5yZXBsYWNlIC8tL2csICdfJ1xuICAgICAgICAgICAgQF93cmFwX29uZSBldmVudCwgdGhpc1tldmVudF1cblxuICAgIGFwcCA9ICd3YW5kZXJpbmctY291bnRyeSdcblxuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgV2FuZGVyaW5nQ291bnRyeVdpdGhVc2VyRGF0YWJhc2VcbiAgICAgIFdhbmRlcmluZ0NvdW50cnlXaXRoQ0NOUVxuICAgICAgV2FuZGVyaW5nQ291bnRyeVxuICAgIH1cblxuICAgIHtwX2Z1bn0gPSByZXF1aXJlICdjb2ZmZWVzY3JpcHQtaGVscGVycydcblxuICAgIGNvdWNoYXBwID0gKHtub3JtYWxpemVfYWNjb3VudH0pIC0+XG4gICAgICBleHRyYSA9IFwidmFyIG5vcm1hbGl6ZV9hY2NvdW50ID0gI3tub3JtYWxpemVfYWNjb3VudH07XCJcblxuICAgICAgX2lkOiBcIl9kZXNpZ24vI3thcHB9XCJcbiAgICAgIGxhbmd1YWdlOiAnamF2YXNjcmlwdCdcbiAgICAgIHZpZXdzOlxuICAgICAgICBudW1iZXJzX2J5X2RvbWFpbjpcbiAgICAgICAgICBtYXA6IHBfZnVuIChkb2MpIC0+XG4gICAgICAgICAgICByZXR1cm4gdW5sZXNzIGRvYy50eXBlPyBhbmQgZG9jLnR5cGUgaXMgJ251bWJlcidcbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgbSA9IGRvYy5faWQubWF0Y2ggL15udW1iZXI6W15AXStAKC4rKSQvXG4gICAgICAgICAgICBlbWl0IG1bMV1cbiAgICAgICAgICByZWR1Y2U6ICdfY291bnQnXG5cbiAgICAgICAgZW5kcG9pbnRzX2J5X2RvbWFpbjpcbiAgICAgICAgICBtYXA6IHBfZnVuIChkb2MpIC0+XG4gICAgICAgICAgICByZXR1cm4gdW5sZXNzIGRvYy50eXBlPyBhbmQgZG9jLnR5cGUgaXMgJ2VuZHBvaW50J1xuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBtID0gZG9jLl9pZC5tYXRjaCAvXmVuZHBvaW50OlteQF0rQCguKykkL1xuICAgICAgICAgICAgZW1pdCBtWzFdXG5cbiAgICAgICAgZGV2aWNlczpcbiAgICAgICAgICBtYXA6IHBfZnVuIGV4dHJhLCAoZG9jKSAtPlxuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBkb2MudHlwZT8gYW5kIGRvYy50eXBlIGlzICdkZXZpY2UnXG4gICAgICAgICAgICByZXR1cm4gaWYgZG9jLmRpc2FibGVkXG5cbiAgICAgICAgICAgIGlmIGRvYy5hY2NvdW50P1xuICAgICAgICAgICAgICBhY2NvdW50ID0gbm9ybWFsaXplX2FjY291bnQgZG9jLmFjY291bnRcbiAgICAgICAgICAgICAgZW1pdCBbJ2FjY291bnQnLGFjY291bnRdXG5cbiAgICAgICAgbnVtYmVyX2RvbWFpbnM6XG4gICAgICAgICAgbWFwOiBwX2Z1biBleHRyYSwgKGRvYykgLT5cbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgZG9jLnR5cGU/IGFuZCBkb2MudHlwZSBpcyAnbnVtYmVyX2RvbWFpbidcbiAgICAgICAgICAgIHJldHVybiBpZiBkb2MuZGlzYWJsZWRcblxuICAgICAgICAgICAgaWYgZG9jLmFjY291bnQ/XG4gICAgICAgICAgICAgIGFjY291bnQgPSBub3JtYWxpemVfYWNjb3VudCBkb2MuYWNjb3VudFxuICAgICAgICAgICAgICBlbWl0IFsnYWNjb3VudCcsYWNjb3VudF1cblxuICAgICAgICBlbmRwb2ludHM6XG4gICAgICAgICAgbWFwOiBwX2Z1biBleHRyYSwgKGRvYykgLT5cbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgZG9jLnR5cGU/IGFuZCBkb2MudHlwZSBpcyAnZW5kcG9pbnQnXG4gICAgICAgICAgICByZXR1cm4gaWYgZG9jLmRpc2FibGVkXG5cbiAgICAgICAgICAgIGlmIGRvYy5hY2NvdW50P1xuICAgICAgICAgICAgICBhY2NvdW50ID0gbm9ybWFsaXplX2FjY291bnQgZG9jLmFjY291bnRcbiAgICAgICAgICAgICAgZW1pdCBbJ2FjY291bnQnLGFjY291bnRdXG5cbiAgICAgICAgICAgIG0gPSBkb2MuX2lkLm1hdGNoIC9eZW5kcG9pbnQ6W15AXStAKC4rKSQvXG4gICAgICAgICAgICBpZiBtP1sxXT9cbiAgICAgICAgICAgICAgZW1pdCBbJ2RvbWFpbicsbVsxXV1cblxuICAgICAgICBsb2NhbF9udW1iZXJzOlxuICAgICAgICAgIG1hcDogcF9mdW4gZXh0cmEsIChkb2MpIC0+XG4gICAgICAgICAgICByZXR1cm4gdW5sZXNzIGRvYy50eXBlPyBhbmQgZG9jLnR5cGUgaXMgJ251bWJlcidcbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgbSA9IGRvYy5faWQubWF0Y2ggL15udW1iZXI6W15AXStAKC4rKSQvXG4gICAgICAgICAgICByZXR1cm4gaWYgZG9jLmRpc2FibGVkXG5cbiAgICAgICAgICAgIGlmIGRvYy5hY2NvdW50P1xuICAgICAgICAgICAgICBhY2NvdW50ID0gbm9ybWFsaXplX2FjY291bnQgZG9jLmFjY291bnRcbiAgICAgICAgICAgICAgZW1pdCBbJ2FjY291bnQnLGFjY291bnRdXG5cbiAgICAgICAgICAgIGlmIG1bMV0/XG4gICAgICAgICAgICAgIGVtaXQgWydudW1iZXJfZG9tYWluJyxtWzFdXVxuXG5WaWV3IGZvciAoYWRtaW4pIHJvdXRpbmcgb2YgZ2xvYmFsIG51bWJlcnMuXG5UaGUgdmlldyBsaXN0cyBhbGwgZ2xvYmFsIG51bWJlcnMgZm9yIGEgZ2l2ZW4gYWNjb3VudC5cblRoZSB2aWV3IGxpc3RzIHRoZSBnbG9iYWwgbnVtYmVyKHMpIHJvdXRpbmcgdG8gYSBnaXZlbiBsb2NhbC1udW1iZXIuXG5cbiAgICAgICAgZ2xvYmFsX251bWJlcnM6XG4gICAgICAgICAgbWFwOiBwX2Z1biBleHRyYSwgKGRvYykgLT5cbiAgICAgICAgICAgIHJldHVybiB1bmxlc3MgZG9jLnR5cGU/IGFuZCBkb2MudHlwZSBpcyAnbnVtYmVyJ1xuICAgICAgICAgICAgcmV0dXJuIGlmIG0gPSBkb2MuX2lkLm1hdGNoIC9ebnVtYmVyOlteQF0rQCguKykkL1xuICAgICAgICAgICAgcmV0dXJuIGlmIGRvYy5kaXNhYmxlZFxuXG4gICAgICAgICAgICBpZiBkb2MuYWNjb3VudD9cbiAgICAgICAgICAgICAgYWNjb3VudCA9IG5vcm1hbGl6ZV9hY2NvdW50IGRvYy5hY2NvdW50XG4gICAgICAgICAgICAgIGVtaXQgWydhY2NvdW50JyxhY2NvdW50XVxuXG4gICAgICAgICAgICBpZiBkb2MubG9jYWxfbnVtYmVyP1xuICAgICAgICAgICAgICBlbWl0IFsnbG9jYWxfbnVtYmVyJyxkb2MubG9jYWxfbnVtYmVyXVxuIl19
//# sourceURL=/srv/home/stephane/Artisan/Managed/Telecoms/wandering-country/index.coffee.md