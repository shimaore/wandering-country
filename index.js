// Generated by CoffeeScript 1.12.7
(function() {
  var WanderingCountry, WanderingCountryBase, WanderingCountryWithCCNQ, WanderingCountryWithUserDatabase, app, assert, couchapp, create, debug, load, ref, seem, sleep, update, update_version,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  debug = (require('debug'))('wandering-country');

  seem = require('seem');

  sleep = require('marked-summer/sleep');

  update_version = require('marked-summer/update-version');

  ref = require('./design'), app = ref.app, couchapp = ref.couchapp;

  assert = function(test, msg) {
    if (!test) {
      throw new Error(msg);
    }
  };

  load = seem(function*(db, id) {
    var doc;
    debug('load', {
      id: id
    });
    return doc = (yield db.get(id)["catch"](function() {
      return {
        _id: id
      };
    }));
  });

  create = seem(function*(db, doc) {
    var rev;
    debug('create', doc);
    rev = (yield db.put(doc)["catch"](function(error) {
      debug("create: " + error + " " + error.stack);
      return Promise.reject(error);
    })).rev;
    debug('create OK', {
      rev: rev
    });
    doc._rev = rev;
    return doc;
  });

  update = seem(function*(db, data, retry) {
    var doc, k, rev, v;
    if (retry == null) {
      retry = 1;
    }
    debug('update', data);
    doc = (yield db.get(data._id)["catch"](function() {
      return data;
    }));
    debug('update: get', doc);
    for (k in data) {
      v = data[k];
      if (k[0] !== '_') {
        doc[k] = v;
      }
    }
    if (data._deleted) {
      doc._deleted = data._deleted;
    }
    debug('update: put', doc);
    rev = (yield db.put(doc)["catch"](seem(function*(error) {
      debug(error + " " + error.stack);
      if (retry > 0) {
        yield sleep(500);
        return (yield update(db, data, retry - 1));
      } else {
        return Promise.reject(error);
      }
    }))).rev;
    doc._rev = rev;
    return doc;
  });

  WanderingCountryBase = (function() {
    function WanderingCountryBase(db1) {
      this.db = db1;
    }

    WanderingCountryBase.prototype.load = function(id) {
      return load(this.db, id);
    };

    WanderingCountryBase.prototype.update = function(data) {
      return update(this.db, data);
    };

    WanderingCountryBase.prototype.create = function(data) {
      return create(this.db, data);
    };

    return WanderingCountryBase;

  })();

  WanderingCountryWithCCNQ = (function(superClass) {
    var generic_load, prefix_handlers, register;

    extend(WanderingCountryWithCCNQ, superClass);

    function WanderingCountryWithCCNQ() {
      this.create_device = bind(this.create_device, this);
      this.create_domain = bind(this.create_domain, this);
      return WanderingCountryWithCCNQ.__super__.constructor.apply(this, arguments);
    }

    WanderingCountryWithCCNQ.prototype.normalize_account = 'function(account) { return account }';

    generic_load = function(name) {
      return seem(function*(key) {
        var docs, rows;
        debug("generic_load " + name, key);
        rows = (yield this.db.query(app + "/" + name, {
          reduce: false,
          include_docs: true,
          key: key
        })["catch"](function(error) {
          debug("generic_load " + name + " Failed: " + error + " " + error.stack);
          return Promise.reject(error);
        })).rows;
        debug("generic_load " + name + " OK", key, rows);
        return docs = rows.map(function(row) {
          return row.doc;
        });
      });
    };

    WanderingCountryWithCCNQ.prototype.devices_for = generic_load('devices');

    WanderingCountryWithCCNQ.prototype.endpoints_for = generic_load('endpoints');

    WanderingCountryWithCCNQ.prototype.global_numbers_for = generic_load('global_numbers');

    WanderingCountryWithCCNQ.prototype.local_numbers_for = generic_load('local_numbers');

    WanderingCountryWithCCNQ.prototype.number_domains_for = generic_load('number_domains');

    WanderingCountryWithCCNQ.prototype.load_devices_for_account = function(account) {
      return this.devices_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_endpoints_for_account = function(account) {
      return this.endpoints_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_endpoints_for_domain = function(domain) {
      return this.endpoints_for(['domain', domain]);
    };

    WanderingCountryWithCCNQ.prototype.load_global_numbers_for_account = function(account) {
      return this.global_numbers_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_global_numbers_for_local_number = function(local_number) {
      return this.global_numbers_for(['local_number', local_number]);
    };

    WanderingCountryWithCCNQ.prototype.load_local_numbers_for_account = function(account) {
      return this.local_numbers_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.load_local_numbers_for_number_domain = function(number_domain) {
      return this.local_numbers_for(['number_domain', number_domain]);
    };

    WanderingCountryWithCCNQ.prototype.load_number_domains_for_account = function(account) {
      return this.number_domains_for(['account', account]);
    };

    WanderingCountryWithCCNQ.prototype.create_domain = function(doc) {
      doc.type = 'domain';
      return this.create(doc);
    };

    WanderingCountryWithCCNQ.prototype.create_device = function(doc) {
      doc.type = 'device';
      return this.create(doc);
    };

    WanderingCountryWithCCNQ.prototype.load_list_entries = seem(function*(number) {
      var docs, rows;
      debug('load_list_entries', number);
      rows = (yield this.db.allDocs({
        startkey: "list:" + number + "@",
        endkey: "list:" + number + "@\uffff",
        include_docs: true
      })["catch"](function(error) {
        debug("load_list_entries: " + error + " " + error.stack);
        return Promise.reject(error);
      })).rows;
      return docs = rows.map(function(row) {
        return row.doc;
      });
    });

    WanderingCountryWithCCNQ.prototype.add_list_entry = seem(function*(doc) {
      var rev;
      debug('add_list_entry', doc);
      if (!(doc.blacklist === true || doc.whitelist === true)) {
        return null;
      }
      doc._id = "list:" + doc.number + "@" + doc.calling_number;
      doc.type = 'list';
      debug('add_list_entry', doc);
      rev = (yield this.db.put(doc)["catch"](function(error) {
        debug("add_list_entry " + error + " " + error.stack);
        return Promise.reject(error);
      })).rev;
      return rev;
    });

    WanderingCountryWithCCNQ.prototype.load_domain = seem(function*(name) {
      var domain, endpoints, number_domain, numbers, result, rows;
      debug('load_domain: number-domain', name);
      number_domain = (yield this.db.get("number_domain:" + name)["catch"](function() {
        return null;
      }));
      debug('load_domain: domain', name);
      domain = (yield this.db.get("domain:" + name)["catch"](function() {
        return null;
      }));
      debug('load_domain: numbers by domain', name);
      rows = (yield this.db.query(app + "/numbers_by_domain", {
        reduce: false,
        include_docs: true,
        key: name
      })["catch"](function() {
        return {
          rows: []
        };
      })).rows;
      numbers = rows.map(function(row) {
        return row.doc;
      });
      debug('load_domain: endpoints by domain', name);
      rows = (yield this.db.query(app + "/endpoints_by_domain", {
        reduce: false,
        include_docs: true,
        key: name
      })["catch"](function() {
        return {
          rows: []
        };
      })).rows;
      endpoints = rows.map(function(row) {
        return row.doc;
      });
      if (!((number_domain != null) || (domain != null) || numbers.length > 0 || endpoints.length > 0)) {
        return Promise.reject(new Error("No data for domain " + name));
      }
      result = {
        domain: domain,
        number_domain: number_domain,
        numbers: numbers,
        endpoints: endpoints
      };
      debug('load_domain', result);
      return result;
    });

    WanderingCountryWithCCNQ.prototype.load_number_domains = seem(function*() {
      var rows;
      debug('load_number_domains');
      rows = (yield this.db.allDocs({
        startkey: 'number_domain:',
        endkey: 'number_domain:\uffff',
        include_docs: true
      })["catch"](function(error) {
        var ref1;
        debug("load_number_domains: " + ((ref1 = error.stack) != null ? ref1 : error));
        return Promise.reject(error);
      })).rows;
      debug('load_number_domains', rows);
      return rows.map(function(row) {
        var m;
        m = row.id.match(/^number_domain:(.+)$/);
        return {
          name: m[1],
          label: m[1],
          dialplan: row.doc.dialplan
        };
      });
    });

    WanderingCountryWithCCNQ.prototype.push_couchapp = function() {
      var doc;
      doc = couchapp({
        normalize_account: this.normalize_account
      });
      debug('couchapp', doc);
      return update_version(this.db, doc);
    };

    prefix_handlers = function(prefix) {
      var obj;
      return (
        obj = {},
        obj["load_" + prefix] = function(id) {
          return this.load(prefix + ":" + id, "load_" + prefix);
        },
        obj["update_" + prefix] = function(data) {
          return this.update(data, "update_" + prefix);
        },
        obj["remove_" + prefix] = function(data) {
          data._deleted = true;
          return this.update(data, "remove_" + prefix);
        },
        obj
      );
    };

    register = function(handlers) {
      var handler, name, results;
      results = [];
      for (name in handlers) {
        if (!hasProp.call(handlers, name)) continue;
        handler = handlers[name];
        results.push(WanderingCountryWithCCNQ.prototype[name] = handler);
      }
      return results;
    };

    register(prefix_handlers('list'));

    register(prefix_handlers('number'));

    register(prefix_handlers('endpoint'));

    register(prefix_handlers('number_domain'));

    register(prefix_handlers('device'));

    WanderingCountryWithCCNQ.prototype.update_prov_audio_blob = seem(function*(id, file, base, opts) {
      var a, doc, orig, ref1, rev;
      debug('update_prov_audio_blob', id, base, opts);
      orig = base;
      switch (file.type) {
        case 'audio/mpeg':
          base += '.mp3';
          break;
        case 'audio/mp3':
          base += '.mp3';
          break;
        case 'audio/wav':
          base += '.wav';
          break;
        case 'audio/x-wav':
          base += '.wav';
          break;
        default:
          return Promise.reject(new Error("update_prov_audio_blob invalid_type " + file.type));
      }
      doc = (yield this.db.get(id));
      a = (ref1 = (yield this.db.putAttachment(doc._id, base, doc._rev, file, file.type)["catch"](function(error) {
        debug("update_prov_audio_blob " + error + " " + error.stack);
        return Promise.reject(error);
      })), rev = ref1.rev, ref1);
      return orig;
    });

    WanderingCountryWithCCNQ.prototype.create_dns_for_domain = seem(function*(domain) {
      var cfg, doc;
      debug('create_dns_for_domain', domain);
      cfg = (yield this.dns_for_domain(domain));
      debug('create_dns_for_domain, cfg', cfg);
      if (!((cfg.soa != null) && (cfg.admin != null) && (cfg.records != null))) {
        return Promise.reject(new Error('invalid configuration'));
      }
      doc = {
        _id: "domain:" + domain,
        domain: domain,
        type: 'domain',
        soa: cfg.soa,
        admin: cfg.admin,
        records: cfg.records
      };
      return (yield this.update(doc));
    });

    return WanderingCountryWithCCNQ;

  })(WanderingCountryBase);

  WanderingCountryWithUserDatabase = (function(superClass) {
    var load_messages, register;

    extend(WanderingCountryWithUserDatabase, superClass);

    function WanderingCountryWithUserDatabase(db, user_db1) {
      this.user_db = user_db1;
      WanderingCountryWithUserDatabase.__super__.constructor.call(this, db);
    }

    WanderingCountryWithUserDatabase.prototype.load_voicemail_settings = seem(function*(name) {
      var doc, udb;
      debug('load_voicemail_settings', {
        name: name
      });
      udb = this.user_db(name);
      doc = (yield load(udb, 'voicemail_settings'));
      udb.close();
      return doc;
    });

    WanderingCountryWithUserDatabase.prototype.update_voicemail_settings = seem(function*(name, data) {
      var doc, udb;
      debug('update_voicemail_settings', {
        name: name,
        data: data
      });
      udb = this.user_db(name);
      doc = (yield update(udb, data));
      udb.close();
      return doc;
    });

    load_messages = function(cat) {
      var obj;
      return (
        obj = {},
        obj["load_" + cat + "_messages"] = seem(function*(name) {
          var result, rows, udb;
          udb = this.user_db(name);
          rows = (yield udb.query("voicemail/" + cat + "_messages", {
            include_docs: true
          })["catch"](function() {
            return {
              rows: null
            };
          })).rows;
          result = rows != null ? rows.map(function(row) {
            return row.doc;
          }) : void 0;
          udb.close();
          return result;
        }),
        obj
      );
    };

    register = function(handlers) {
      var handler, name, results;
      results = [];
      for (name in handlers) {
        if (!hasProp.call(handlers, name)) continue;
        handler = handlers[name];
        results.push(WanderingCountryWithUserDatabase.prototype[name] = handler);
      }
      return results;
    };

    register(load_messages('new'));

    register(load_messages('saved'));

    WanderingCountryWithUserDatabase.prototype.update_audio_blob = seem(function*(name, file, base) {
      var doc, orig, rev, udb;
      debug('update_audio_blob', name, file, base);
      orig = base;
      switch (file.type) {
        case 'audio/mpeg':
          base += '.mp3';
          break;
        case 'audio/mp3':
          base += '.mp3';
          break;
        case 'audio/wav':
          base += '.wav';
          break;
        default:
          return Promise.reject(new Error(name + " invalid_type " + file.type));
      }
      udb = this.user_db(name);
      doc = (yield udb.get('voicemail_settings'));
      rev = (yield udb.putAttachment(doc._id, base, doc._rev, file, file.type)["catch"](function() {
        return {
          rev: null
        };
      })).rev;
      udb.close();
      return rev;
    });

    return WanderingCountryWithUserDatabase;

  })(WanderingCountryWithCCNQ);

  WanderingCountry = (function(superClass) {
    extend(WanderingCountry, superClass);

    WanderingCountry.prototype.start_monitoring = function(this_db) {
      var changes;
      debug('start_monitoring', this_db.name);
      changes = this_db.changes({
        live: true,
        since: 'now',
        include_docs: true
      });
      changes.on('change', (function(_this) {
        return function(change) {
          debug('monitor: change', change);
          return _this.ev.trigger('change', change.doc);
        };
      })(this));
      changes.on('error', (function(_this) {
        return function(error) {
          debug("monitor: error", this_db.name, error);
          setTimeout((function() {
            return _this.start_monitoring(this_db);
          }), 10 * 1000);
        };
      })(this));
      return changes;
    };

    WanderingCountry.prototype.__unmonitor_voicemail = function() {
      var ref1, ref2;
      if ((ref1 = this.monitor.voicemail) != null) {
        ref1.cancel();
      }
      this.monitor.voicemail = null;
      if ((ref2 = this.monitor.voicemail_db) != null) {
        ref2.close();
      }
      return this.monitor.voicemail_db = null;
    };

    WanderingCountry.prototype.monitor_voicemail = function(name) {
      this.__unmonitor_voicemail();
      this.monitor.voicemail_db = this.user_db(name);
      this.monitor.voicemail = this.start_monitoring(this.monitor.voicemail_db);
      return Promise.resolve();
    };

    function WanderingCountry(db, user_db, ev) {
      this.ev = ev;
      WanderingCountry.__super__.constructor.call(this, db, user_db);
      this.monitor = {};
      this.monitor.provisioning = this.start_monitoring(db);
      this.ev.one('shutdown', (function(_this) {
        return function() {
          _this.monitor.provisioning.cancel();
          _this.monitor.provisioning = null;
          _this.db.close();
          _this.db = null;
          return _this.__unmonitor_voicemail();
        };
      })(this));
    }

    WanderingCountry.prototype.trigger = function(event, data) {
      return this.ev.trigger(event, data);
    };

    WanderingCountry.prototype.on = function(event, handler) {
      return this.ev.on(event, handler);
    };

    WanderingCountry.prototype.one = function(event, handler) {
      return this.ev.one(event, handler);
    };

    WanderingCountry.prototype._handler = function(event, fun) {
      var handler;
      assert(event && fun, "Invalid " + event);
      return handler = (function(_this) {
        return function() {
          var args, error, on_reject, on_resolve;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          debug("" + event, args);
          on_resolve = function(data) {
            debug(event + ":done", data);
            _this.trigger(event + ":done", data);
            return data;
          };
          on_reject = function(error) {
            debug(event + ":error");
            _this.trigger(event + ":error", error);
            return Promise.reject(error);
          };
          try {
            fun.apply(_this, args).then(on_resolve, on_reject);
          } catch (error1) {
            error = error1;
            on_reject(error);
          }
        };
      })(this);
    };

    WanderingCountry.prototype._wrap_on = function(event, fun) {
      var handler;
      handler = this._handler(event, fun);
      this.on(event, handler);
      return handler;
    };

    WanderingCountry.prototype._wrap_one = function(event, fun) {
      var handler;
      handler = this._handler(event, fun);
      this.one(event, handler);
      return handler;
    };

    WanderingCountry.prototype.install_handlers = function() {
      var event, events, fn, fn1, i, j, len, len1;
      events = ['load_devices_for_account', 'load_endpoints_for_account', 'load_endpoints_for_domain', 'load_global_numbers_for_account', 'load_global_numbers_for_local_number', 'load_local_numbers_for_account', 'load_local_numbers_for_number_domain', 'load_number_domains_for_account', 'create_domain', 'create_device', 'load_list_entries', 'add_list_entry', 'load_domain', 'load_number_domains', 'load_voicemail_settings', 'update_voicemail_settings', 'load_new_messages', 'load_saved_messages', 'update_audio_blob', 'update_prov_audio_blob', 'create_dns_for_domain', 'load_list', 'update_list', 'remove_list', 'load_number', 'update_number', 'remove_number', 'load_endpoint', 'update_endpoint', 'remove_endpoint', 'load_number_domain', 'update_number_domain', 'remove_number_domain', 'load_device', 'update_device', 'remove_device', 'monitor_voicemail'];
      fn = (function(_this) {
        return function(event) {
          event = event.replace(/-/g, '_');
          return _this._wrap_on(event, _this[event]);
        };
      })(this);
      for (i = 0, len = events.length; i < len; i++) {
        event = events[i];
        fn(event);
      }
      events = ['push_couchapp'];
      fn1 = (function(_this) {
        return function(event) {
          event = event.replace(/-/g, '_');
          return _this._wrap_one(event, _this[event]);
        };
      })(this);
      for (j = 0, len1 = events.length; j < len1; j++) {
        event = events[j];
        fn1(event);
      }
    };

    return WanderingCountry;

  })(WanderingCountryWithUserDatabase);

  module.exports = {
    WanderingCountryWithUserDatabase: WanderingCountryWithUserDatabase,
    WanderingCountryWithCCNQ: WanderingCountryWithCCNQ,
    WanderingCountry: WanderingCountry
  };

}).call(this);
