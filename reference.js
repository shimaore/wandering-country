// Generated by CoffeeScript 1.12.5
(function() {
  var WanderingCountryReference, moment, post, seem,
    hasProp = {}.hasOwnProperty;

  moment = require('moment');

  seem = require('seem');

  post = function(result) {
    var k, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, v;
    for (k in result) {
      if (!hasProp.call(result, k)) continue;
      v = result[k];
      v.egress_count = (ref = (ref1 = v.egress) != null ? ref1.count : void 0) != null ? ref : 0;
      v.egress_total = (ref2 = (ref3 = v.egress) != null ? ref3.sum : void 0) != null ? ref2 : 0;
      if ((v.egress_count != null) && v.egress_count > 0) {
        v.egress_average = v.egress_total / v.egress_count;
      }
      v.answered_count = (ref4 = (ref5 = v['ingress-answered']) != null ? ref5.count : void 0) != null ? ref4 : 0;
      v.answered_total = (ref6 = (ref7 = v['ingress-answered']) != null ? ref7.sum : void 0) != null ? ref6 : 0;
      if ((v.answered_count != null) && v.answered_count > 0) {
        v.answered_average = v.answered_total / v.answered_count;
      }
      v.unanswered_count = (ref8 = (ref9 = v['ingress-unanswered']) != null ? ref9.count : void 0) != null ? ref8 : 0;
      v.unanswered_total = (ref10 = (ref11 = v['ingress-unanswered']) != null ? ref11.sum : void 0) != null ? ref10 : 0;
      v.ingress_count = v.answered_count + v.unanswered_count;
      v.ingress_total = v.answered_total + v.unanswered_total;
      if ((v.ingress_count != null) && v.ingress_count > 0) {
        v.ingress_average = v.ingress_total / v.ingress_count;
      }
    }
    return result;
  };

  WanderingCountryReference = (function() {
    function WanderingCountryReference(ref_db) {
      this.ref_db = ref_db;
    }

    WanderingCountryReference.prototype.endpoint = function(endpoint, start_date, end_date) {
      return this._query('endpoint', endpoint, start_date, end_date);
    };

    WanderingCountryReference.prototype._query = seem(function*(type, type_value, start_date, end_date) {
      var end_key, result, start_key, start_month;
      start_key = moment(start_date, 'YYYY-MM-DD').subtract(1, 'days');
      end_key = moment(end_date, 'YYYY-MM-DD').add(1, 'days');
      start_month = start_key.clone().startOf('month');
      result = {};
      while (start_month.isBefore(end_key)) {
        yield seem((function(_this) {
          return function*() {
            var db, i, len, results, row, rows;
            db = _this.ref_db(start_month.format('YYYY-MM'));
            if (db == null) {
              return;
            }
            rows = (yield db.query('grumpy-actor/tags', {
              startkey: [type, type_value, start_key.format('YYYY-MM-DD')],
              endkey: [type, type_value, end_key.format('YYYY-MM-DD')],
              group: true
            })).rows;
            yield db.close();
            db = null;
            results = [];
            for (i = 0, len = rows.length; i < len; i++) {
              row = rows[i];
              results.push((function(arg) {
                var _0, _1, date, ref, tag, value;
                (ref = arg.key, _0 = ref[0], _1 = ref[1], date = ref[2], tag = ref[3]), value = arg.value;
                if (result[date] == null) {
                  result[date] = {};
                }
                return result[date][tag] = value;
              })(row));
            }
            return results;
          };
        })(this))();
        start_month.add(1, 'months');
        null;
      }
      return post(result);
    });

    return WanderingCountryReference;

  })();

  module.exports = {
    WanderingCountryReference: WanderingCountryReference
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVmZXJlbmNlLmNvZmZlZS5tZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUk7QUFBQSxNQUFBLDZDQUFBO0lBQUE7O0VBQUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztFQUNULElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7RUFFUCxJQUFBLEdBQU8sU0FBQyxNQUFEO0FBQ0wsUUFBQTtBQUFBLFNBQUEsV0FBQTs7O01BSUUsQ0FBQyxDQUFDLFlBQUYsMkVBQW1DO01BSW5DLENBQUMsQ0FBQyxZQUFGLDJFQUFpQztNQUlqQyxJQUFHLHdCQUFBLElBQW9CLENBQUMsQ0FBQyxZQUFGLEdBQWlCLENBQXhDO1FBQ0UsQ0FBQyxDQUFDLGNBQUYsR0FBbUIsQ0FBQyxDQUFDLFlBQUYsR0FBaUIsQ0FBQyxDQUFDLGFBRHhDOztNQUtBLENBQUMsQ0FBQyxjQUFGLDBGQUFrRDtNQUNsRCxDQUFDLENBQUMsY0FBRix3RkFBZ0Q7TUFFaEQsSUFBRywwQkFBQSxJQUFzQixDQUFDLENBQUMsY0FBRixHQUFtQixDQUE1QztRQUNFLENBQUMsQ0FBQyxnQkFBRixHQUFxQixDQUFDLENBQUMsY0FBRixHQUFtQixDQUFDLENBQUMsZUFENUM7O01BS0EsQ0FBQyxDQUFDLGdCQUFGLDRGQUFzRDtNQUN0RCxDQUFDLENBQUMsZ0JBQUYsOEZBQW9EO01BSXBELENBQUMsQ0FBQyxhQUFGLEdBQWtCLENBQUMsQ0FBQyxjQUFGLEdBQW1CLENBQUMsQ0FBQztNQUl2QyxDQUFDLENBQUMsYUFBRixHQUFrQixDQUFDLENBQUMsY0FBRixHQUFtQixDQUFDLENBQUM7TUFJdkMsSUFBRyx5QkFBQSxJQUFxQixDQUFDLENBQUMsYUFBRixHQUFrQixDQUExQztRQUNFLENBQUMsQ0FBQyxlQUFGLEdBQW9CLENBQUMsQ0FBQyxhQUFGLEdBQWtCLENBQUMsQ0FBQyxjQUQxQzs7QUF0Q0Y7V0F5Q0E7RUExQ0s7O0VBOENEO0lBRVMsbUNBQUMsTUFBRDtNQUFDLElBQUMsQ0FBQSxTQUFEO0lBQUQ7O3dDQUliLFFBQUEsR0FBVSxTQUFDLFFBQUQsRUFBVyxVQUFYLEVBQXVCLFFBQXZCO2FBQ1IsSUFBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSLEVBQW9CLFFBQXBCLEVBQThCLFVBQTlCLEVBQTBDLFFBQTFDO0lBRFE7O3dDQUdWLE1BQUEsR0FBUSxJQUFBLENBQUssVUFBQyxJQUFELEVBQU0sVUFBTixFQUFpQixVQUFqQixFQUE0QixRQUE1QjtBQUVYLFVBQUE7TUFBQSxTQUFBLEdBQVksTUFBQSxDQUFPLFVBQVAsRUFBbUIsWUFBbkIsQ0FDVixDQUFDLFFBRFMsQ0FDQSxDQURBLEVBQ0csTUFESDtNQUdaLE9BQUEsR0FBVSxNQUFBLENBQU8sUUFBUCxFQUFpQixZQUFqQixDQUNSLENBQUMsR0FETyxDQUNILENBREcsRUFDQSxNQURBO01BR1YsV0FBQSxHQUFjLFNBQVMsQ0FBQyxLQUFWLENBQUEsQ0FDWixDQUFDLE9BRFcsQ0FDSCxPQURHO01BR2QsTUFBQSxHQUFTO0FBRVQsYUFBTSxXQUFXLENBQUMsUUFBWixDQUFxQixPQUFyQixDQUFOO1FBQ0UsTUFBUyxJQUFBLENBQUssQ0FBQSxTQUFBLEtBQUE7aUJBQUEsVUFBQTtBQUNaLGdCQUFBO1lBQUEsRUFBQSxHQUFLLEtBQUMsQ0FBQSxNQUFELENBQVEsV0FBVyxDQUFDLE1BQVosQ0FBbUIsU0FBbkIsQ0FBUjtZQUNMLElBQWMsVUFBZDtBQUFBLHFCQUFBOztZQUNDLE9BQVEsQ0FBQSxNQUFNLEVBQUUsQ0FBQyxLQUFILENBQVMsbUJBQVQsRUFDYjtjQUFBLFFBQUEsRUFBVSxDQUNSLElBRFEsRUFFUixVQUZRLEVBR1IsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsWUFBakIsQ0FIUSxDQUFWO2NBS0EsTUFBQSxFQUFRLENBQ04sSUFETSxFQUVOLFVBRk0sRUFHTixPQUFPLENBQUMsTUFBUixDQUFlLFlBQWYsQ0FITSxDQUxSO2NBVUEsS0FBQSxFQUFPLElBVlA7YUFEYSxDQUFOO1lBWVQsTUFBTSxFQUFFLENBQUMsS0FBSCxDQUFBO1lBQ04sRUFBQSxHQUFLO0FBRUw7aUJBQUEsc0NBQUE7OzJCQUNLLENBQUEsU0FBQyxHQUFEO0FBQ0Qsb0JBQUE7MkJBREcsS0FBSyxhQUFHLGFBQUcsZUFBSyxlQUFLOztrQkFDeEIsTUFBTyxDQUFBLElBQUEsSUFBUzs7dUJBQ2hCLE1BQU8sQ0FBQSxJQUFBLENBQU0sQ0FBQSxHQUFBLENBQWIsR0FBb0I7Y0FGbkIsQ0FBQSxDQUFILENBQW1DLEdBQW5DO0FBREY7O1VBbEJZO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFMLENBQUgsQ0FBQTtRQXVCTixXQUFXLENBQUMsR0FBWixDQUFnQixDQUFoQixFQUFtQixRQUFuQjtRQUNBO01BekJGO2FBMkJBLElBQUEsQ0FBSyxNQUFMO0lBeENXLENBQUw7Ozs7OztFQTBDVixNQUFNLENBQUMsT0FBUCxHQUFpQjtJQUFDLDJCQUFBLHlCQUFEOztBQXBHakIiLCJzb3VyY2VzQ29udGVudCI6WyIgICAgbW9tZW50ID0gcmVxdWlyZSAnbW9tZW50J1xuICAgIHNlZW0gPSByZXF1aXJlICdzZWVtJ1xuXG4gICAgcG9zdCA9IChyZXN1bHQpIC0+XG4gICAgICBmb3Igb3duIGssIHYgb2YgcmVzdWx0XG5cbi0gbnVtYmVyIG9mIGVncmVzcyBjYWxsc1xuXG4gICAgICAgIHYuZWdyZXNzX2NvdW50ID0gdi5lZ3Jlc3M/LmNvdW50ID8gMFxuXG4tIHRvdGFsIChiaWxsYWJsZSkgZHVyYXRpb24gb2YgZWdyZXNzIGNhbGxzXG5cbiAgICAgICAgdi5lZ3Jlc3NfdG90YWwgPSB2LmVncmVzcz8uc3VtID8gMFxuXG4tIGF2ZXJhZ2UgZWdyZXNzIGNhbGwgZHVyYXRpb25cblxuICAgICAgICBpZiB2LmVncmVzc19jb3VudD8gYW5kIHYuZWdyZXNzX2NvdW50ID4gMFxuICAgICAgICAgIHYuZWdyZXNzX2F2ZXJhZ2UgPSB2LmVncmVzc190b3RhbCAvIHYuZWdyZXNzX2NvdW50XG5cbi0gbnVtYmVyIG9mIGFuc3dlcmVkIGNhbGxzXG5cbiAgICAgICAgdi5hbnN3ZXJlZF9jb3VudCA9IHZbJ2luZ3Jlc3MtYW5zd2VyZWQnXT8uY291bnQgPyAwXG4gICAgICAgIHYuYW5zd2VyZWRfdG90YWwgPSB2WydpbmdyZXNzLWFuc3dlcmVkJ10/LnN1bSA/IDBcblxuICAgICAgICBpZiB2LmFuc3dlcmVkX2NvdW50PyBhbmQgdi5hbnN3ZXJlZF9jb3VudCA+IDBcbiAgICAgICAgICB2LmFuc3dlcmVkX2F2ZXJhZ2UgPSB2LmFuc3dlcmVkX3RvdGFsIC8gdi5hbnN3ZXJlZF9jb3VudFxuXG4tIG51bWJlciBvZiB1bmFuc3dlcmVkIGNhbGxzXG5cbiAgICAgICAgdi51bmFuc3dlcmVkX2NvdW50ID0gdlsnaW5ncmVzcy11bmFuc3dlcmVkJ10/LmNvdW50ID8gMFxuICAgICAgICB2LnVuYW5zd2VyZWRfdG90YWwgPSB2WydpbmdyZXNzLXVuYW5zd2VyZWQnXT8uc3VtID8gMFxuXG4tIG51bWJlciBvZiByZWNlaXZlZCBjYWxsc1xuXG4gICAgICAgIHYuaW5ncmVzc19jb3VudCA9IHYuYW5zd2VyZWRfY291bnQgKyB2LnVuYW5zd2VyZWRfY291bnRcblxuLSB0b3RhbCBkdXJhdGlvbiBvbiBpbmdyZXNzIGNhbGxzXG5cbiAgICAgICAgdi5pbmdyZXNzX3RvdGFsID0gdi5hbnN3ZXJlZF90b3RhbCArIHYudW5hbnN3ZXJlZF90b3RhbFxuXG4tIGF2ZXJhZ2UgaW5ncmVzcyBjYWxsIGR1cmF0aW9uXG5cbiAgICAgICAgaWYgdi5pbmdyZXNzX2NvdW50PyBhbmQgdi5pbmdyZXNzX2NvdW50ID4gMFxuICAgICAgICAgIHYuaW5ncmVzc19hdmVyYWdlID0gdi5pbmdyZXNzX3RvdGFsIC8gdi5pbmdyZXNzX2NvdW50XG5cbiAgICAgIHJlc3VsdFxuXG4jIyMgRXh0ZW5kZWQgQ0RScyAoY2xpZW50LXNpZGUpXG5cbiAgICBjbGFzcyBXYW5kZXJpbmdDb3VudHJ5UmVmZXJlbmNlXG5cbiAgICAgIGNvbnN0cnVjdG9yOiAoQHJlZl9kYikgLT5cblxuRm9yIGEgZ2l2ZW4gZW5kcG9pbnQgYW5kIGEgZGF0ZS1yYW5nZSwgcmV0dXJucyBkYXRlcywgYW5kIGZvciBlYWNoIGRhdGU6XG5cbiAgICAgIGVuZHBvaW50OiAoZW5kcG9pbnQsIHN0YXJ0X2RhdGUsIGVuZF9kYXRlKSAtPlxuICAgICAgICBAX3F1ZXJ5ICdlbmRwb2ludCcsIGVuZHBvaW50LCBzdGFydF9kYXRlLCBlbmRfZGF0ZVxuXG4gICAgICBfcXVlcnk6IHNlZW0gKHR5cGUsdHlwZV92YWx1ZSxzdGFydF9kYXRlLGVuZF9kYXRlKSAtPlxuXG4gICAgICAgIHN0YXJ0X2tleSA9IG1vbWVudCBzdGFydF9kYXRlLCAnWVlZWS1NTS1ERCdcbiAgICAgICAgICAuc3VidHJhY3QgMSwgJ2RheXMnXG5cbiAgICAgICAgZW5kX2tleSA9IG1vbWVudCBlbmRfZGF0ZSwgJ1lZWVktTU0tREQnXG4gICAgICAgICAgLmFkZCAxLCAnZGF5cydcblxuICAgICAgICBzdGFydF9tb250aCA9IHN0YXJ0X2tleS5jbG9uZSgpXG4gICAgICAgICAgLnN0YXJ0T2YgJ21vbnRoJ1xuXG4gICAgICAgIHJlc3VsdCA9IHt9XG5cbiAgICAgICAgd2hpbGUgc3RhcnRfbW9udGguaXNCZWZvcmUgZW5kX2tleVxuICAgICAgICAgIHlpZWxkIGRvIHNlZW0gPT5cbiAgICAgICAgICAgIGRiID0gQHJlZl9kYiBzdGFydF9tb250aC5mb3JtYXQgJ1lZWVktTU0nXG4gICAgICAgICAgICByZXR1cm4gdW5sZXNzIGRiP1xuICAgICAgICAgICAge3Jvd3N9ID0geWllbGQgZGIucXVlcnkgJ2dydW1weS1hY3Rvci90YWdzJyxcbiAgICAgICAgICAgICAgc3RhcnRrZXk6IFtcbiAgICAgICAgICAgICAgICB0eXBlXG4gICAgICAgICAgICAgICAgdHlwZV92YWx1ZVxuICAgICAgICAgICAgICAgIHN0YXJ0X2tleS5mb3JtYXQgJ1lZWVktTU0tREQnXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgZW5ka2V5OiBbXG4gICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgICAgIHR5cGVfdmFsdWVcbiAgICAgICAgICAgICAgICBlbmRfa2V5LmZvcm1hdCAnWVlZWS1NTS1ERCdcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBncm91cDogdHJ1ZVxuICAgICAgICAgICAgeWllbGQgZGIuY2xvc2UoKVxuICAgICAgICAgICAgZGIgPSBudWxsXG5cbiAgICAgICAgICAgIGZvciByb3cgaW4gcm93c1xuICAgICAgICAgICAgICBkbyAoe2tleTpbXzAsXzEsZGF0ZSx0YWddLHZhbHVlfSA9IHJvdykgLT5cbiAgICAgICAgICAgICAgICByZXN1bHRbZGF0ZV0gPz0ge31cbiAgICAgICAgICAgICAgICByZXN1bHRbZGF0ZV1bdGFnXSA9IHZhbHVlXG5cbiAgICAgICAgICBzdGFydF9tb250aC5hZGQgMSwgJ21vbnRocydcbiAgICAgICAgICBudWxsXG5cbiAgICAgICAgcG9zdCByZXN1bHRcblxuICAgIG1vZHVsZS5leHBvcnRzID0ge1dhbmRlcmluZ0NvdW50cnlSZWZlcmVuY2V9XG4iXX0=
//# sourceURL=/srv/home/stephane/Artisan/Managed/Telecoms/wandering-country/reference.coffee.md