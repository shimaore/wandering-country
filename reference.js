// Generated by CoffeeScript 1.12.4
(function() {
  var PouchDB, WanderingCountryReference, browser, location, moment, post, seem,
    hasProp = {}.hasOwnProperty;

  moment = require('moment');

  seem = require('seem');

  post = function(result) {
    var k, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, v;
    for (k in result) {
      if (!hasProp.call(result, k)) continue;
      v = result[k];
      v.egress_count = (ref = (ref1 = v.egress) != null ? ref1.count : void 0) != null ? ref : 0;
      v.egress_total = (ref2 = (ref3 = v.egress) != null ? ref3.sum : void 0) != null ? ref2 : 0;
      if ((v.egress_count != null) && v.egress_count > 0) {
        v.egress_average = v.egress_total / v.egress_count;
      }
      v.answered_count = (ref4 = (ref5 = v['ingress-answered']) != null ? ref5.count : void 0) != null ? ref4 : 0;
      v.answered_total = (ref6 = (ref7 = v['ingress-answered']) != null ? ref7.sum : void 0) != null ? ref6 : 0;
      if ((v.answered_count != null) && v.answered_count > 0) {
        v.answered_average = v.answered_total / v.answered_count;
      }
      v.unanswered_count = (ref8 = (ref9 = v['ingress-unanswered']) != null ? ref9.count : void 0) != null ? ref8 : 0;
      v.unanswered_total = (ref10 = (ref11 = v['ingress-unanswered']) != null ? ref11.sum : void 0) != null ? ref10 : 0;
      v.ingress_count = v.answered_count + v.unanswered_count;
      v.ingress_total = v.answered_total + v.unanswered_total;
      if ((v.ingress_count != null) && v.ingress_count > 0) {
        v.ingress_average = v.ingress_total / v.ingress_count;
      }
    }
    return result;
  };

  WanderingCountryReference = (function() {
    function WanderingCountryReference(ref_db) {
      this.ref_db = ref_db;
    }

    WanderingCountryReference.prototype.endpoint = function(endpoint, start_date, end_date) {
      return this._query('endpoint', endpoint, start_date, end_date);
    };

    WanderingCountryReference.prototype._query = seem(function*(type, type_value, start_date, end_date) {
      var end_key, result, start_key, start_month;
      start_key = moment(start_date, 'YYYY-MM-DD').subtract(1, 'days');
      end_key = moment(end_date, 'YYYY-MM-DD').add(1, 'days');
      start_month = start_key.clone().startOf('month');
      result = {};
      while (start_month.isBefore(end_key)) {
        yield seem((function(_this) {
          return function*() {
            var db, i, len, results, row, rows;
            db = _this.ref_db(start_month.format('YYYY-MM'));
            if (db == null) {
              return;
            }
            rows = (yield db.query('grumpy-actor/tags', {
              startkey: [type, type_value, start_key.format('YYYY-MM-DD')],
              endkey: [type, type_value, end_key.format('YYYY-MM-DD')],
              group: true
            })).rows;
            yield db.close();
            db = null;
            results = [];
            for (i = 0, len = rows.length; i < len; i++) {
              row = rows[i];
              results.push((function(arg) {
                var _0, _1, date, ref, tag, value;
                (ref = arg.key, _0 = ref[0], _1 = ref[1], date = ref[2], tag = ref[3]), value = arg.value;
                if (result[date] == null) {
                  result[date] = {};
                }
                return result[date][tag] = value;
              })(row));
            }
            return results;
          };
        })(this))();
        start_month.add(1, 'months');
        null;
      }
      return post(result);
    });

    return WanderingCountryReference;

  })();

  PouchDB = require('shimaore-pouchdb');

  location = function(name) {
    return [window.location.protocol, '//', window.location.host, '/', name].join('');
  };

  browser = function(month) {
    var name;
    name = ['reference', month].join('-');
    return new PouchDB(location(name));
  };

  module.exports = {
    WanderingCountryReference: WanderingCountryReference,
    browser: browser
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVmZXJlbmNlLmNvZmZlZS5tZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUk7QUFBQSxNQUFBLHlFQUFBO0lBQUE7O0VBQUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztFQUNULElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7RUFFUCxJQUFBLEdBQU8sU0FBQyxNQUFEO0FBQ0wsUUFBQTtBQUFBLFNBQUEsV0FBQTs7O01BSUUsQ0FBQyxDQUFDLFlBQUYsMkVBQW1DO01BSW5DLENBQUMsQ0FBQyxZQUFGLDJFQUFpQztNQUlqQyxJQUFHLHdCQUFBLElBQW9CLENBQUMsQ0FBQyxZQUFGLEdBQWlCLENBQXhDO1FBQ0UsQ0FBQyxDQUFDLGNBQUYsR0FBbUIsQ0FBQyxDQUFDLFlBQUYsR0FBaUIsQ0FBQyxDQUFDLGFBRHhDOztNQUtBLENBQUMsQ0FBQyxjQUFGLDBGQUFrRDtNQUNsRCxDQUFDLENBQUMsY0FBRix3RkFBZ0Q7TUFFaEQsSUFBRywwQkFBQSxJQUFzQixDQUFDLENBQUMsY0FBRixHQUFtQixDQUE1QztRQUNFLENBQUMsQ0FBQyxnQkFBRixHQUFxQixDQUFDLENBQUMsY0FBRixHQUFtQixDQUFDLENBQUMsZUFENUM7O01BS0EsQ0FBQyxDQUFDLGdCQUFGLDRGQUFzRDtNQUN0RCxDQUFDLENBQUMsZ0JBQUYsOEZBQW9EO01BSXBELENBQUMsQ0FBQyxhQUFGLEdBQWtCLENBQUMsQ0FBQyxjQUFGLEdBQW1CLENBQUMsQ0FBQztNQUl2QyxDQUFDLENBQUMsYUFBRixHQUFrQixDQUFDLENBQUMsY0FBRixHQUFtQixDQUFDLENBQUM7TUFJdkMsSUFBRyx5QkFBQSxJQUFxQixDQUFDLENBQUMsYUFBRixHQUFrQixDQUExQztRQUNFLENBQUMsQ0FBQyxlQUFGLEdBQW9CLENBQUMsQ0FBQyxhQUFGLEdBQWtCLENBQUMsQ0FBQyxjQUQxQzs7QUF0Q0Y7V0F5Q0E7RUExQ0s7O0VBOENEO0lBRVMsbUNBQUMsTUFBRDtNQUFDLElBQUMsQ0FBQSxTQUFEO0lBQUQ7O3dDQUliLFFBQUEsR0FBVSxTQUFDLFFBQUQsRUFBVyxVQUFYLEVBQXVCLFFBQXZCO2FBQ1IsSUFBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSLEVBQW9CLFFBQXBCLEVBQThCLFVBQTlCLEVBQTBDLFFBQTFDO0lBRFE7O3dDQUdWLE1BQUEsR0FBUSxJQUFBLENBQUssVUFBQyxJQUFELEVBQU0sVUFBTixFQUFpQixVQUFqQixFQUE0QixRQUE1QjtBQUVYLFVBQUE7TUFBQSxTQUFBLEdBQVksTUFBQSxDQUFPLFVBQVAsRUFBbUIsWUFBbkIsQ0FDVixDQUFDLFFBRFMsQ0FDQSxDQURBLEVBQ0csTUFESDtNQUdaLE9BQUEsR0FBVSxNQUFBLENBQU8sUUFBUCxFQUFpQixZQUFqQixDQUNSLENBQUMsR0FETyxDQUNILENBREcsRUFDQSxNQURBO01BR1YsV0FBQSxHQUFjLFNBQVMsQ0FBQyxLQUFWLENBQUEsQ0FDWixDQUFDLE9BRFcsQ0FDSCxPQURHO01BR2QsTUFBQSxHQUFTO0FBRVQsYUFBTSxXQUFXLENBQUMsUUFBWixDQUFxQixPQUFyQixDQUFOO1FBQ0UsTUFBUyxJQUFBLENBQUssQ0FBQSxTQUFBLEtBQUE7aUJBQUEsVUFBQTtBQUNaLGdCQUFBO1lBQUEsRUFBQSxHQUFLLEtBQUMsQ0FBQSxNQUFELENBQVEsV0FBVyxDQUFDLE1BQVosQ0FBbUIsU0FBbkIsQ0FBUjtZQUNMLElBQWMsVUFBZDtBQUFBLHFCQUFBOztZQUNDLE9BQVEsQ0FBQSxNQUFNLEVBQUUsQ0FBQyxLQUFILENBQVMsbUJBQVQsRUFDYjtjQUFBLFFBQUEsRUFBVSxDQUNSLElBRFEsRUFFUixVQUZRLEVBR1IsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsWUFBakIsQ0FIUSxDQUFWO2NBS0EsTUFBQSxFQUFRLENBQ04sSUFETSxFQUVOLFVBRk0sRUFHTixPQUFPLENBQUMsTUFBUixDQUFlLFlBQWYsQ0FITSxDQUxSO2NBVUEsS0FBQSxFQUFPLElBVlA7YUFEYSxDQUFOO1lBWVQsTUFBTSxFQUFFLENBQUMsS0FBSCxDQUFBO1lBQ04sRUFBQSxHQUFLO0FBRUw7aUJBQUEsc0NBQUE7OzJCQUNLLENBQUEsU0FBQyxHQUFEO0FBQ0Qsb0JBQUE7MkJBREcsS0FBSyxhQUFHLGFBQUcsZUFBSyxlQUFLOztrQkFDeEIsTUFBTyxDQUFBLElBQUEsSUFBUzs7dUJBQ2hCLE1BQU8sQ0FBQSxJQUFBLENBQU0sQ0FBQSxHQUFBLENBQWIsR0FBb0I7Y0FGbkIsQ0FBQSxDQUFILENBQW1DLEdBQW5DO0FBREY7O1VBbEJZO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFMLENBQUgsQ0FBQTtRQXVCTixXQUFXLENBQUMsR0FBWixDQUFnQixDQUFoQixFQUFtQixRQUFuQjtRQUNBO01BekJGO2FBMkJBLElBQUEsQ0FBSyxNQUFMO0lBeENXLENBQUw7Ozs7OztFQTBDVixPQUFBLEdBQVUsT0FBQSxDQUFRLGtCQUFSOztFQUVWLFFBQUEsR0FBVyxTQUFDLElBQUQ7V0FDVCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBakIsRUFBMEIsSUFBMUIsRUFBK0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUEvQyxFQUFvRCxHQUFwRCxFQUF3RCxJQUF4RCxDQUE2RCxDQUFDLElBQTlELENBQW1FLEVBQW5FO0VBRFM7O0VBR1gsT0FBQSxHQUFVLFNBQUMsS0FBRDtBQUNSLFFBQUE7SUFBQSxJQUFBLEdBQU8sQ0FBQyxXQUFELEVBQWEsS0FBYixDQUFtQixDQUFDLElBQXBCLENBQXlCLEdBQXpCO1dBQ1AsSUFBSSxPQUFKLENBQVksUUFBQSxDQUFTLElBQVQsQ0FBWjtFQUZROztFQUlWLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0lBQUMsMkJBQUEseUJBQUQ7SUFBMkIsU0FBQSxPQUEzQjs7QUE3R2pCIiwic291cmNlc0NvbnRlbnQiOlsiICAgIG1vbWVudCA9IHJlcXVpcmUgJ21vbWVudCdcbiAgICBzZWVtID0gcmVxdWlyZSAnc2VlbSdcblxuICAgIHBvc3QgPSAocmVzdWx0KSAtPlxuICAgICAgZm9yIG93biBrLCB2IG9mIHJlc3VsdFxuXG4tIG51bWJlciBvZiBlZ3Jlc3MgY2FsbHNcblxuICAgICAgICB2LmVncmVzc19jb3VudCA9IHYuZWdyZXNzPy5jb3VudCA/IDBcblxuLSB0b3RhbCAoYmlsbGFibGUpIGR1cmF0aW9uIG9mIGVncmVzcyBjYWxsc1xuXG4gICAgICAgIHYuZWdyZXNzX3RvdGFsID0gdi5lZ3Jlc3M/LnN1bSA/IDBcblxuLSBhdmVyYWdlIGVncmVzcyBjYWxsIGR1cmF0aW9uXG5cbiAgICAgICAgaWYgdi5lZ3Jlc3NfY291bnQ/IGFuZCB2LmVncmVzc19jb3VudCA+IDBcbiAgICAgICAgICB2LmVncmVzc19hdmVyYWdlID0gdi5lZ3Jlc3NfdG90YWwgLyB2LmVncmVzc19jb3VudFxuXG4tIG51bWJlciBvZiBhbnN3ZXJlZCBjYWxsc1xuXG4gICAgICAgIHYuYW5zd2VyZWRfY291bnQgPSB2WydpbmdyZXNzLWFuc3dlcmVkJ10/LmNvdW50ID8gMFxuICAgICAgICB2LmFuc3dlcmVkX3RvdGFsID0gdlsnaW5ncmVzcy1hbnN3ZXJlZCddPy5zdW0gPyAwXG5cbiAgICAgICAgaWYgdi5hbnN3ZXJlZF9jb3VudD8gYW5kIHYuYW5zd2VyZWRfY291bnQgPiAwXG4gICAgICAgICAgdi5hbnN3ZXJlZF9hdmVyYWdlID0gdi5hbnN3ZXJlZF90b3RhbCAvIHYuYW5zd2VyZWRfY291bnRcblxuLSBudW1iZXIgb2YgdW5hbnN3ZXJlZCBjYWxsc1xuXG4gICAgICAgIHYudW5hbnN3ZXJlZF9jb3VudCA9IHZbJ2luZ3Jlc3MtdW5hbnN3ZXJlZCddPy5jb3VudCA/IDBcbiAgICAgICAgdi51bmFuc3dlcmVkX3RvdGFsID0gdlsnaW5ncmVzcy11bmFuc3dlcmVkJ10/LnN1bSA/IDBcblxuLSBudW1iZXIgb2YgcmVjZWl2ZWQgY2FsbHNcblxuICAgICAgICB2LmluZ3Jlc3NfY291bnQgPSB2LmFuc3dlcmVkX2NvdW50ICsgdi51bmFuc3dlcmVkX2NvdW50XG5cbi0gdG90YWwgZHVyYXRpb24gb24gaW5ncmVzcyBjYWxsc1xuXG4gICAgICAgIHYuaW5ncmVzc190b3RhbCA9IHYuYW5zd2VyZWRfdG90YWwgKyB2LnVuYW5zd2VyZWRfdG90YWxcblxuLSBhdmVyYWdlIGluZ3Jlc3MgY2FsbCBkdXJhdGlvblxuXG4gICAgICAgIGlmIHYuaW5ncmVzc19jb3VudD8gYW5kIHYuaW5ncmVzc19jb3VudCA+IDBcbiAgICAgICAgICB2LmluZ3Jlc3NfYXZlcmFnZSA9IHYuaW5ncmVzc190b3RhbCAvIHYuaW5ncmVzc19jb3VudFxuXG4gICAgICByZXN1bHRcblxuIyMjIEV4dGVuZGVkIENEUnMgKGNsaWVudC1zaWRlKVxuXG4gICAgY2xhc3MgV2FuZGVyaW5nQ291bnRyeVJlZmVyZW5jZVxuXG4gICAgICBjb25zdHJ1Y3RvcjogKEByZWZfZGIpIC0+XG5cbkZvciBhIGdpdmVuIGVuZHBvaW50IGFuZCBhIGRhdGUtcmFuZ2UsIHJldHVybnMgZGF0ZXMsIGFuZCBmb3IgZWFjaCBkYXRlOlxuXG4gICAgICBlbmRwb2ludDogKGVuZHBvaW50LCBzdGFydF9kYXRlLCBlbmRfZGF0ZSkgLT5cbiAgICAgICAgQF9xdWVyeSAnZW5kcG9pbnQnLCBlbmRwb2ludCwgc3RhcnRfZGF0ZSwgZW5kX2RhdGVcblxuICAgICAgX3F1ZXJ5OiBzZWVtICh0eXBlLHR5cGVfdmFsdWUsc3RhcnRfZGF0ZSxlbmRfZGF0ZSkgLT5cblxuICAgICAgICBzdGFydF9rZXkgPSBtb21lbnQgc3RhcnRfZGF0ZSwgJ1lZWVktTU0tREQnXG4gICAgICAgICAgLnN1YnRyYWN0IDEsICdkYXlzJ1xuXG4gICAgICAgIGVuZF9rZXkgPSBtb21lbnQgZW5kX2RhdGUsICdZWVlZLU1NLUREJ1xuICAgICAgICAgIC5hZGQgMSwgJ2RheXMnXG5cbiAgICAgICAgc3RhcnRfbW9udGggPSBzdGFydF9rZXkuY2xvbmUoKVxuICAgICAgICAgIC5zdGFydE9mICdtb250aCdcblxuICAgICAgICByZXN1bHQgPSB7fVxuXG4gICAgICAgIHdoaWxlIHN0YXJ0X21vbnRoLmlzQmVmb3JlIGVuZF9rZXlcbiAgICAgICAgICB5aWVsZCBkbyBzZWVtID0+XG4gICAgICAgICAgICBkYiA9IEByZWZfZGIgc3RhcnRfbW9udGguZm9ybWF0ICdZWVlZLU1NJ1xuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBkYj9cbiAgICAgICAgICAgIHtyb3dzfSA9IHlpZWxkIGRiLnF1ZXJ5ICdncnVtcHktYWN0b3IvdGFncycsXG4gICAgICAgICAgICAgIHN0YXJ0a2V5OiBbXG4gICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgICAgIHR5cGVfdmFsdWVcbiAgICAgICAgICAgICAgICBzdGFydF9rZXkuZm9ybWF0ICdZWVlZLU1NLUREJ1xuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIGVuZGtleTogW1xuICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgICAgICB0eXBlX3ZhbHVlXG4gICAgICAgICAgICAgICAgZW5kX2tleS5mb3JtYXQgJ1lZWVktTU0tREQnXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgZ3JvdXA6IHRydWVcbiAgICAgICAgICAgIHlpZWxkIGRiLmNsb3NlKClcbiAgICAgICAgICAgIGRiID0gbnVsbFxuXG4gICAgICAgICAgICBmb3Igcm93IGluIHJvd3NcbiAgICAgICAgICAgICAgZG8gKHtrZXk6W18wLF8xLGRhdGUsdGFnXSx2YWx1ZX0gPSByb3cpIC0+XG4gICAgICAgICAgICAgICAgcmVzdWx0W2RhdGVdID89IHt9XG4gICAgICAgICAgICAgICAgcmVzdWx0W2RhdGVdW3RhZ10gPSB2YWx1ZVxuXG4gICAgICAgICAgc3RhcnRfbW9udGguYWRkIDEsICdtb250aHMnXG4gICAgICAgICAgbnVsbFxuXG4gICAgICAgIHBvc3QgcmVzdWx0XG5cbiAgICBQb3VjaERCID0gcmVxdWlyZSAnc2hpbWFvcmUtcG91Y2hkYidcblxuICAgIGxvY2F0aW9uID0gKG5hbWUpIC0+XG4gICAgICBbd2luZG93LmxvY2F0aW9uLnByb3RvY29sLCcvLycsd2luZG93LmxvY2F0aW9uLmhvc3QsJy8nLG5hbWVdLmpvaW4gJydcblxuICAgIGJyb3dzZXIgPSAobW9udGgpIC0+XG4gICAgICBuYW1lID0gWydyZWZlcmVuY2UnLG1vbnRoXS5qb2luICctJ1xuICAgICAgbmV3IFBvdWNoREIgbG9jYXRpb24gbmFtZVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7V2FuZGVyaW5nQ291bnRyeVJlZmVyZW5jZSxicm93c2VyfVxuIl19
//# sourceURL=/srv/home/stephane/Artisan/Managed/Telecoms/wandering-country/reference.coffee.md